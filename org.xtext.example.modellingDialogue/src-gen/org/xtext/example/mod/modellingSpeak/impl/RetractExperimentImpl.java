/**
 * generated by Xtext 2.35.0
 */
package org.xtext.example.mod.modellingSpeak.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mod.modellingSpeak.Experiment;
import org.xtext.example.mod.modellingSpeak.ModellingSpeakPackage;
import org.xtext.example.mod.modellingSpeak.RetractExperiment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Retract Experiment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mod.modellingSpeak.impl.RetractExperimentImpl#getExperiment <em>Experiment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RetractExperimentImpl extends MoveImpl implements RetractExperiment
{
  /**
   * The cached value of the '{@link #getExperiment() <em>Experiment</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExperiment()
   * @generated
   * @ordered
   */
  protected Experiment experiment;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RetractExperimentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModellingSpeakPackage.Literals.RETRACT_EXPERIMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Experiment getExperiment()
  {
    if (experiment != null && experiment.eIsProxy())
    {
      InternalEObject oldExperiment = (InternalEObject)experiment;
      experiment = (Experiment)eResolveProxy(oldExperiment);
      if (experiment != oldExperiment)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ModellingSpeakPackage.RETRACT_EXPERIMENT__EXPERIMENT, oldExperiment, experiment));
      }
    }
    return experiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Experiment basicGetExperiment()
  {
    return experiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExperiment(Experiment newExperiment)
  {
    Experiment oldExperiment = experiment;
    experiment = newExperiment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModellingSpeakPackage.RETRACT_EXPERIMENT__EXPERIMENT, oldExperiment, experiment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModellingSpeakPackage.RETRACT_EXPERIMENT__EXPERIMENT:
        if (resolve) return getExperiment();
        return basicGetExperiment();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModellingSpeakPackage.RETRACT_EXPERIMENT__EXPERIMENT:
        setExperiment((Experiment)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModellingSpeakPackage.RETRACT_EXPERIMENT__EXPERIMENT:
        setExperiment((Experiment)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModellingSpeakPackage.RETRACT_EXPERIMENT__EXPERIMENT:
        return experiment != null;
    }
    return super.eIsSet(featureID);
  }

} //RetractExperimentImpl
