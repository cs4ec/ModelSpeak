/*
 * generated by Xtext 2.35.0
 */
grammar InternalTheoryStore;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.modellingDialogue.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.modellingDialogue.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.modellingDialogue.services.TheoryStoreGrammarAccess;

}

@parser::members {

 	private TheoryStoreGrammarAccess grammarAccess;

    public InternalTheoryStoreParser(TokenStream input, TheoryStoreGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TheoryStore";
   	}

   	@Override
   	protected TheoryStoreGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTheoryStore
entryRuleTheoryStore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheoryStoreRule()); }
	iv_ruleTheoryStore=ruleTheoryStore
	{ $current=$iv_ruleTheoryStore.current; }
	EOF;

// Rule TheoryStore
ruleTheoryStore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTheoryStoreAccess().getElementsElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTheoryStoreRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.modellingDialogue.TheoryStore.Element");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getModelParserRuleCall_0());
		}
		this_Model_0=ruleModel
		{
			$current = $this_Model_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getTheoryParserRuleCall_1());
		}
		this_Theory_1=ruleTheory
		{
			$current = $this_Theory_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getRequirementParserRuleCall_2());
		}
		this_Requirement_2=ruleRequirement
		{
			$current = $this_Requirement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getExperimentParserRuleCall_3());
		}
		this_Experiment_3=ruleExperiment
		{
			$current = $this_Experiment_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_content_3_0=RULE_STRING
				{
					newLeafNode(lv_content_3_0, grammarAccess.getModelAccess().getContentSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4());
		}
		(
			otherlv_5='->'
			{
				newLeafNode(otherlv_5, grammarAccess.getModelAccess().getHyphenMinusGreaterThanSignKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModelRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getModelAccess().getRequirementsRequirementCrossReference_5_1_0());
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getModelAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelRule());
							}
						}
						otherlv_8=RULE_ID
						{
							newLeafNode(otherlv_8, grammarAccess.getModelAccess().getRequirementsRequirementCrossReference_5_2_1_0());
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleTheory
entryRuleTheory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheoryRule()); }
	iv_ruleTheory=ruleTheory
	{ $current=$iv_ruleTheory.current; }
	EOF;

// Rule Theory
ruleTheory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Theory'
		{
			newLeafNode(otherlv_0, grammarAccess.getTheoryAccess().getTheoryKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTheoryAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTheoryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTheoryAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_content_3_0=RULE_STRING
				{
					newLeafNode(lv_content_3_0, grammarAccess.getTheoryAccess().getContentSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTheoryRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTheoryAccess().getRightCurlyBracketKeyword_4());
		}
		(
			otherlv_5='->'
			{
				newLeafNode(otherlv_5, grammarAccess.getTheoryAccess().getHyphenMinusGreaterThanSignKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTheoryRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getTheoryAccess().getElementsElementCrossReference_5_1_0());
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getTheoryAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTheoryRule());
							}
						}
						otherlv_8=RULE_ID
						{
							newLeafNode(otherlv_8, grammarAccess.getTheoryAccess().getElementsElementCrossReference_5_2_1_0());
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	iv_ruleRequirement=ruleRequirement
	{ $current=$iv_ruleRequirement.current; }
	EOF;

// Rule Requirement
ruleRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Requirement'
		{
			newLeafNode(otherlv_0, grammarAccess.getRequirementAccess().getRequirementKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRequirementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequirementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRequirementAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_content_3_0=RULE_STRING
				{
					newLeafNode(lv_content_3_0, grammarAccess.getRequirementAccess().getContentSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequirementRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRequirementAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleExperiment
entryRuleExperiment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExperimentRule()); }
	iv_ruleExperiment=ruleExperiment
	{ $current=$iv_ruleExperiment.current; }
	EOF;

// Rule Experiment
ruleExperiment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Experiment'
		{
			newLeafNode(otherlv_0, grammarAccess.getExperimentAccess().getExperimentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExperimentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExperimentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getExperimentAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_content_3_0=RULE_STRING
				{
					newLeafNode(lv_content_3_0, grammarAccess.getExperimentAccess().getContentSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExperimentRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getExperimentAccess().getRightCurlyBracketKeyword_4());
		}
		otherlv_5='->'
		{
			newLeafNode(otherlv_5, grammarAccess.getExperimentAccess().getHyphenMinusGreaterThanSignKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExperimentRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getExperimentAccess().getModelModelCrossReference_6_0());
				}
			)
		)
		(
			otherlv_7='->'
			{
				newLeafNode(otherlv_7, grammarAccess.getExperimentAccess().getHyphenMinusGreaterThanSignKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExperimentRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getExperimentAccess().getRequirementsRequirementCrossReference_7_1_0());
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getExperimentAccess().getCommaKeyword_7_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExperimentRule());
							}
						}
						otherlv_10=RULE_ID
						{
							newLeafNode(otherlv_10, grammarAccess.getExperimentAccess().getRequirementsRequirementCrossReference_7_2_1_0());
						}
					)
				)
			)*
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
