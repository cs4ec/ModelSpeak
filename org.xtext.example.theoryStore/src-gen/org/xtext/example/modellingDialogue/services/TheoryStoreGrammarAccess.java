/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.modellingDialogue.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TheoryStoreGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TheoryStoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modellingDialogue.TheoryStore.TheoryStore");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//TheoryStore:
		//    elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modellingDialogue.TheoryStore.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTheoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRequirementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExperimentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//    Model | Theory | Requirement | Experiment;
		@Override public ParserRule getRule() { return rule; }
		
		//Model | Theory | Requirement | Experiment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Model
		public RuleCall getModelParserRuleCall_0() { return cModelParserRuleCall_0; }
		
		//Theory
		public RuleCall getTheoryParserRuleCall_1() { return cTheoryParserRuleCall_1; }
		
		//Requirement
		public RuleCall getRequirementParserRuleCall_2() { return cRequirementParserRuleCall_2; }
		
		//Experiment
		public RuleCall getExperimentParserRuleCall_3() { return cExperimentParserRuleCall_3; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modellingDialogue.TheoryStore.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentSTRINGTerminalRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRequirementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRequirementsRequirementCrossReference_5_1_0 = (CrossReference)cRequirementsAssignment_5_1.eContents().get(0);
		private final RuleCall cRequirementsRequirementIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRequirementsRequirementCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cRequirementsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cRequirementsRequirementCrossReference_5_2_1_0 = (CrossReference)cRequirementsAssignment_5_2_1.eContents().get(0);
		private final RuleCall cRequirementsRequirementIDTerminalRuleCall_5_2_1_0_1 = (RuleCall)cRequirementsRequirementCrossReference_5_2_1_0.eContents().get(1);
		
		//Model:
		//    'Model' name=ID '{' content=STRING '}' ('->' requirements+=[Requirement] (',' requirements+=[Requirement])*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Model' name=ID '{' content=STRING '}' ('->' requirements+=[Requirement] (',' requirements+=[Requirement])*)?
		public Group getGroup() { return cGroup; }
		
		//'Model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//content=STRING
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_3_0() { return cContentSTRINGTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//('->' requirements+=[Requirement] (',' requirements+=[Requirement])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }
		
		//requirements+=[Requirement]
		public Assignment getRequirementsAssignment_5_1() { return cRequirementsAssignment_5_1; }
		
		//[Requirement]
		public CrossReference getRequirementsRequirementCrossReference_5_1_0() { return cRequirementsRequirementCrossReference_5_1_0; }
		
		//ID
		public RuleCall getRequirementsRequirementIDTerminalRuleCall_5_1_0_1() { return cRequirementsRequirementIDTerminalRuleCall_5_1_0_1; }
		
		//(',' requirements+=[Requirement])*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//requirements+=[Requirement]
		public Assignment getRequirementsAssignment_5_2_1() { return cRequirementsAssignment_5_2_1; }
		
		//[Requirement]
		public CrossReference getRequirementsRequirementCrossReference_5_2_1_0() { return cRequirementsRequirementCrossReference_5_2_1_0; }
		
		//ID
		public RuleCall getRequirementsRequirementIDTerminalRuleCall_5_2_1_0_1() { return cRequirementsRequirementIDTerminalRuleCall_5_2_1_0_1; }
	}
	public class TheoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modellingDialogue.TheoryStore.Theory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentSTRINGTerminalRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cElementsElementCrossReference_5_1_0 = (CrossReference)cElementsAssignment_5_1.eContents().get(0);
		private final RuleCall cElementsElementIDTerminalRuleCall_5_1_0_1 = (RuleCall)cElementsElementCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cElementsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cElementsElementCrossReference_5_2_1_0 = (CrossReference)cElementsAssignment_5_2_1.eContents().get(0);
		private final RuleCall cElementsElementIDTerminalRuleCall_5_2_1_0_1 = (RuleCall)cElementsElementCrossReference_5_2_1_0.eContents().get(1);
		
		//Theory:
		//    'Theory' name=ID '{' content=STRING '}' ('->' elements+=[Element] (',' elements+=[Element])*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Theory' name=ID '{' content=STRING '}' ('->' elements+=[Element] (',' elements+=[Element])*)?
		public Group getGroup() { return cGroup; }
		
		//'Theory'
		public Keyword getTheoryKeyword_0() { return cTheoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//content=STRING
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_3_0() { return cContentSTRINGTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//('->' elements+=[Element] (',' elements+=[Element])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }
		
		//elements+=[Element]
		public Assignment getElementsAssignment_5_1() { return cElementsAssignment_5_1; }
		
		//[Element]
		public CrossReference getElementsElementCrossReference_5_1_0() { return cElementsElementCrossReference_5_1_0; }
		
		//ID
		public RuleCall getElementsElementIDTerminalRuleCall_5_1_0_1() { return cElementsElementIDTerminalRuleCall_5_1_0_1; }
		
		//(',' elements+=[Element])*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//elements+=[Element]
		public Assignment getElementsAssignment_5_2_1() { return cElementsAssignment_5_2_1; }
		
		//[Element]
		public CrossReference getElementsElementCrossReference_5_2_1_0() { return cElementsElementCrossReference_5_2_1_0; }
		
		//ID
		public RuleCall getElementsElementIDTerminalRuleCall_5_2_1_0_1() { return cElementsElementIDTerminalRuleCall_5_2_1_0_1; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modellingDialogue.TheoryStore.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentSTRINGTerminalRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Requirement:
		//    'Requirement' name=ID '{' content=STRING '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Requirement' name=ID '{' content=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'Requirement'
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//content=STRING
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_3_0() { return cContentSTRINGTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modellingDialogue.TheoryStore.Experiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentSTRINGTerminalRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cModelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cModelModelCrossReference_6_0 = (CrossReference)cModelAssignment_6.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_6_0_1 = (RuleCall)cModelModelCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cRequirementsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cRequirementsRequirementCrossReference_7_1_0 = (CrossReference)cRequirementsAssignment_7_1.eContents().get(0);
		private final RuleCall cRequirementsRequirementIDTerminalRuleCall_7_1_0_1 = (RuleCall)cRequirementsRequirementCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cRequirementsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final CrossReference cRequirementsRequirementCrossReference_7_2_1_0 = (CrossReference)cRequirementsAssignment_7_2_1.eContents().get(0);
		private final RuleCall cRequirementsRequirementIDTerminalRuleCall_7_2_1_0_1 = (RuleCall)cRequirementsRequirementCrossReference_7_2_1_0.eContents().get(1);
		
		//Experiment:
		//    'Experiment' name=ID '{' content=STRING '}' '->' model+=[Model] ('->' requirements+=[Requirement] (',' requirements+=[Requirement])*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Experiment' name=ID '{' content=STRING '}' '->' model+=[Model] ('->' requirements+=[Requirement] (',' requirements+=[Requirement])*)?
		public Group getGroup() { return cGroup; }
		
		//'Experiment'
		public Keyword getExperimentKeyword_0() { return cExperimentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//content=STRING
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_3_0() { return cContentSTRINGTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//model+=[Model]
		public Assignment getModelAssignment_6() { return cModelAssignment_6; }
		
		//[Model]
		public CrossReference getModelModelCrossReference_6_0() { return cModelModelCrossReference_6_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_6_0_1() { return cModelModelIDTerminalRuleCall_6_0_1; }
		
		//('->' requirements+=[Requirement] (',' requirements+=[Requirement])*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7_0() { return cHyphenMinusGreaterThanSignKeyword_7_0; }
		
		//requirements+=[Requirement]
		public Assignment getRequirementsAssignment_7_1() { return cRequirementsAssignment_7_1; }
		
		//[Requirement]
		public CrossReference getRequirementsRequirementCrossReference_7_1_0() { return cRequirementsRequirementCrossReference_7_1_0; }
		
		//ID
		public RuleCall getRequirementsRequirementIDTerminalRuleCall_7_1_0_1() { return cRequirementsRequirementIDTerminalRuleCall_7_1_0_1; }
		
		//(',' requirements+=[Requirement])*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//','
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//requirements+=[Requirement]
		public Assignment getRequirementsAssignment_7_2_1() { return cRequirementsAssignment_7_2_1; }
		
		//[Requirement]
		public CrossReference getRequirementsRequirementCrossReference_7_2_1_0() { return cRequirementsRequirementCrossReference_7_2_1_0; }
		
		//ID
		public RuleCall getRequirementsRequirementIDTerminalRuleCall_7_2_1_0_1() { return cRequirementsRequirementIDTerminalRuleCall_7_2_1_0_1; }
	}
	
	
	private final TheoryStoreElements pTheoryStore;
	private final ElementElements pElement;
	private final ModelElements pModel;
	private final TheoryElements pTheory;
	private final RequirementElements pRequirement;
	private final ExperimentElements pExperiment;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TheoryStoreGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTheoryStore = new TheoryStoreElements();
		this.pElement = new ElementElements();
		this.pModel = new ModelElements();
		this.pTheory = new TheoryElements();
		this.pRequirement = new RequirementElements();
		this.pExperiment = new ExperimentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.modellingDialogue.TheoryStore".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TheoryStore:
	//    elements+=Element*;
	public TheoryStoreElements getTheoryStoreAccess() {
		return pTheoryStore;
	}
	
	public ParserRule getTheoryStoreRule() {
		return getTheoryStoreAccess().getRule();
	}
	
	//Element:
	//    Model | Theory | Requirement | Experiment;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Model:
	//    'Model' name=ID '{' content=STRING '}' ('->' requirements+=[Requirement] (',' requirements+=[Requirement])*)?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Theory:
	//    'Theory' name=ID '{' content=STRING '}' ('->' elements+=[Element] (',' elements+=[Element])*)?;
	public TheoryElements getTheoryAccess() {
		return pTheory;
	}
	
	public ParserRule getTheoryRule() {
		return getTheoryAccess().getRule();
	}
	
	//Requirement:
	//    'Requirement' name=ID '{' content=STRING '}';
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//Experiment:
	//    'Experiment' name=ID '{' content=STRING '}' '->' model+=[Model] ('->' requirements+=[Requirement] (',' requirements+=[Requirement])*)?;
	public ExperimentElements getExperimentAccess() {
		return pExperiment;
	}
	
	public ParserRule getExperimentRule() {
		return getExperimentAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
