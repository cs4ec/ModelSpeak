/*
 * generated by Xtext 2.36.0
 */
package uk.ac.kcl.inf.modelspeak.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.modelspeak.ide.contentassist.antlr.internal.InternalAgentLangParser;
import uk.ac.kcl.inf.modelspeak.services.AgentLangGrammarAccess;

public class AgentLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AgentLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AgentLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMoveAccess().getAlternatives(), "rule__Move__Alternatives");
			builder.put(grammarAccess.getTheoryAccess().getAlternatives(), "rule__Theory__Alternatives");
			builder.put(grammarAccess.getResearchQuestionAccess().getGroup(), "rule__ResearchQuestion__Group__0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getModelAccess().getGroup_1(), "rule__Model__Group_1__0");
			builder.put(grammarAccess.getRequirementAccess().getGroup(), "rule__Requirement__Group__0");
			builder.put(grammarAccess.getRequirementAccess().getGroup_1(), "rule__Requirement__Group_1__0");
			builder.put(grammarAccess.getExperimentAccess().getGroup(), "rule__Experiment__Group__0");
			builder.put(grammarAccess.getMultiTheoryAccess().getGroup(), "rule__MultiTheory__Group__0");
			builder.put(grammarAccess.getMultiTheoryAccess().getGroup_3(), "rule__MultiTheory__Group_3__0");
			builder.put(grammarAccess.getGeneralTheoryAccess().getGroup(), "rule__GeneralTheory__Group__0");
			builder.put(grammarAccess.getLiteratureReferenceAccess().getGroup(), "rule__LiteratureReference__Group__0");
			builder.put(grammarAccess.getProposeRQAccess().getGroup(), "rule__ProposeRQ__Group__0");
			builder.put(grammarAccess.getProposeRequirementAccess().getGroup(), "rule__ProposeRequirement__Group__0");
			builder.put(grammarAccess.getAttackRequirementAccess().getGroup(), "rule__AttackRequirement__Group__0");
			builder.put(grammarAccess.getRedefineRequirementAccess().getGroup(), "rule__RedefineRequirement__Group__0");
			builder.put(grammarAccess.getRetractRequirementAccess().getGroup(), "rule__RetractRequirement__Group__0");
			builder.put(grammarAccess.getSupportRequirementAccess().getGroup(), "rule__SupportRequirement__Group__0");
			builder.put(grammarAccess.getProposeModelAccess().getGroup(), "rule__ProposeModel__Group__0");
			builder.put(grammarAccess.getSupportModelAccess().getGroup(), "rule__SupportModel__Group__0");
			builder.put(grammarAccess.getReplaceModelAccess().getGroup(), "rule__ReplaceModel__Group__0");
			builder.put(grammarAccess.getCounterModelAccess().getGroup(), "rule__CounterModel__Group__0");
			builder.put(grammarAccess.getAttackModelAccess().getGroup(), "rule__AttackModel__Group__0");
			builder.put(grammarAccess.getReviseRequirementAccess().getGroup(), "rule__ReviseRequirement__Group__0");
			builder.put(grammarAccess.getProposeExperimentAccess().getGroup(), "rule__ProposeExperiment__Group__0");
			builder.put(grammarAccess.getSupportExperimentAccess().getGroup(), "rule__SupportExperiment__Group__0");
			builder.put(grammarAccess.getAttackExperimentAccess().getGroup(), "rule__AttackExperiment__Group__0");
			builder.put(grammarAccess.getRetractExperimentAccess().getGroup(), "rule__RetractExperiment__Group__0");
			builder.put(grammarAccess.getStudyDoneAccess().getGroup(), "rule__StudyDone__Group__0");
			builder.put(grammarAccess.getNotConvincedAccess().getGroup(), "rule__NotConvinced__Group__0");
			builder.put(grammarAccess.getGameAccess().getMovesAssignment(), "rule__Game__MovesAssignment");
			builder.put(grammarAccess.getResearchQuestionAccess().getNameAssignment_0(), "rule__ResearchQuestion__NameAssignment_0");
			builder.put(grammarAccess.getResearchQuestionAccess().getEffectAssignment_6(), "rule__ResearchQuestion__EffectAssignment_6");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_0(), "rule__Model__NameAssignment_0");
			builder.put(grammarAccess.getModelAccess().getContentAssignment_1_1(), "rule__Model__ContentAssignment_1_1");
			builder.put(grammarAccess.getModelAccess().getMechanismAssignment_5(), "rule__Model__MechanismAssignment_5");
			builder.put(grammarAccess.getRequirementAccess().getNameAssignment_0(), "rule__Requirement__NameAssignment_0");
			builder.put(grammarAccess.getRequirementAccess().getContentAssignment_1_1(), "rule__Requirement__ContentAssignment_1_1");
			builder.put(grammarAccess.getRequirementAccess().getDataDescriptionAssignment_6(), "rule__Requirement__DataDescriptionAssignment_6");
			builder.put(grammarAccess.getExperimentAccess().getNameAssignment_0(), "rule__Experiment__NameAssignment_0");
			builder.put(grammarAccess.getExperimentAccess().getContentAssignment_2(), "rule__Experiment__ContentAssignment_2");
			builder.put(grammarAccess.getMultiTheoryAccess().getNameAssignment_0(), "rule__MultiTheory__NameAssignment_0");
			builder.put(grammarAccess.getMultiTheoryAccess().getTheoriesAssignment_2(), "rule__MultiTheory__TheoriesAssignment_2");
			builder.put(grammarAccess.getMultiTheoryAccess().getTheoriesAssignment_3_1(), "rule__MultiTheory__TheoriesAssignment_3_1");
			builder.put(grammarAccess.getGeneralTheoryAccess().getNameAssignment_0(), "rule__GeneralTheory__NameAssignment_0");
			builder.put(grammarAccess.getGeneralTheoryAccess().getContentAssignment_2(), "rule__GeneralTheory__ContentAssignment_2");
			builder.put(grammarAccess.getLiteratureReferenceAccess().getNameAssignment_0(), "rule__LiteratureReference__NameAssignment_0");
			builder.put(grammarAccess.getLiteratureReferenceAccess().getRefAssignment_1(), "rule__LiteratureReference__RefAssignment_1");
			builder.put(grammarAccess.getProposeRQAccess().getRqAssignment_2(), "rule__ProposeRQ__RqAssignment_2");
			builder.put(grammarAccess.getProposeRequirementAccess().getRequirementAssignment_2(), "rule__ProposeRequirement__RequirementAssignment_2");
			builder.put(grammarAccess.getProposeRequirementAccess().getRqAssignment_4(), "rule__ProposeRequirement__RqAssignment_4");
			builder.put(grammarAccess.getAttackRequirementAccess().getRequirementAssignment_2(), "rule__AttackRequirement__RequirementAssignment_2");
			builder.put(grammarAccess.getAttackRequirementAccess().getTheoryAssignment_4(), "rule__AttackRequirement__TheoryAssignment_4");
			builder.put(grammarAccess.getRedefineRequirementAccess().getRequirementAssignment_2(), "rule__RedefineRequirement__RequirementAssignment_2");
			builder.put(grammarAccess.getRedefineRequirementAccess().getNewRequirementAssignment_4(), "rule__RedefineRequirement__NewRequirementAssignment_4");
			builder.put(grammarAccess.getRetractRequirementAccess().getRequirementAssignment_2(), "rule__RetractRequirement__RequirementAssignment_2");
			builder.put(grammarAccess.getSupportRequirementAccess().getRequirementAssignment_2(), "rule__SupportRequirement__RequirementAssignment_2");
			builder.put(grammarAccess.getSupportRequirementAccess().getTheoryAssignment_4(), "rule__SupportRequirement__TheoryAssignment_4");
			builder.put(grammarAccess.getProposeModelAccess().getModelAssignment_2(), "rule__ProposeModel__ModelAssignment_2");
			builder.put(grammarAccess.getProposeModelAccess().getRequirementAssignment_4(), "rule__ProposeModel__RequirementAssignment_4");
			builder.put(grammarAccess.getSupportModelAccess().getModelAssignment_2(), "rule__SupportModel__ModelAssignment_2");
			builder.put(grammarAccess.getSupportModelAccess().getTheoryAssignment_4(), "rule__SupportModel__TheoryAssignment_4");
			builder.put(grammarAccess.getReplaceModelAccess().getModelAssignment_2(), "rule__ReplaceModel__ModelAssignment_2");
			builder.put(grammarAccess.getReplaceModelAccess().getNewModelAssignment_4(), "rule__ReplaceModel__NewModelAssignment_4");
			builder.put(grammarAccess.getCounterModelAccess().getModelAssignment_2(), "rule__CounterModel__ModelAssignment_2");
			builder.put(grammarAccess.getCounterModelAccess().getExperimentAssignment_4(), "rule__CounterModel__ExperimentAssignment_4");
			builder.put(grammarAccess.getCounterModelAccess().getRequirementAssignment_6(), "rule__CounterModel__RequirementAssignment_6");
			builder.put(grammarAccess.getAttackModelAccess().getModelAssignment_2(), "rule__AttackModel__ModelAssignment_2");
			builder.put(grammarAccess.getAttackModelAccess().getTheoryAssignment_4(), "rule__AttackModel__TheoryAssignment_4");
			builder.put(grammarAccess.getReviseRequirementAccess().getModelAssignment_2(), "rule__ReviseRequirement__ModelAssignment_2");
			builder.put(grammarAccess.getReviseRequirementAccess().getRequirementAssignment_4(), "rule__ReviseRequirement__RequirementAssignment_4");
			builder.put(grammarAccess.getReviseRequirementAccess().getNewRequirementAssignment_6(), "rule__ReviseRequirement__NewRequirementAssignment_6");
			builder.put(grammarAccess.getReviseRequirementAccess().getExperimentAssignment_8(), "rule__ReviseRequirement__ExperimentAssignment_8");
			builder.put(grammarAccess.getProposeExperimentAccess().getModelAssignment_2(), "rule__ProposeExperiment__ModelAssignment_2");
			builder.put(grammarAccess.getProposeExperimentAccess().getExperimentAssignment_4(), "rule__ProposeExperiment__ExperimentAssignment_4");
			builder.put(grammarAccess.getProposeExperimentAccess().getRequirementAssignment_6(), "rule__ProposeExperiment__RequirementAssignment_6");
			builder.put(grammarAccess.getSupportExperimentAccess().getExperimentAssignment_2(), "rule__SupportExperiment__ExperimentAssignment_2");
			builder.put(grammarAccess.getSupportExperimentAccess().getTheoryAssignment_4(), "rule__SupportExperiment__TheoryAssignment_4");
			builder.put(grammarAccess.getAttackExperimentAccess().getExperimentAssignment_2(), "rule__AttackExperiment__ExperimentAssignment_2");
			builder.put(grammarAccess.getAttackExperimentAccess().getTheoryAssignment_4(), "rule__AttackExperiment__TheoryAssignment_4");
			builder.put(grammarAccess.getRetractExperimentAccess().getExperimentAssignment_2(), "rule__RetractExperiment__ExperimentAssignment_2");
			builder.put(grammarAccess.getNotConvincedAccess().getModelAssignment_2(), "rule__NotConvinced__ModelAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AgentLangGrammarAccess grammarAccess;

	@Override
	protected InternalAgentLangParser createParser() {
		InternalAgentLangParser result = new InternalAgentLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AgentLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AgentLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
