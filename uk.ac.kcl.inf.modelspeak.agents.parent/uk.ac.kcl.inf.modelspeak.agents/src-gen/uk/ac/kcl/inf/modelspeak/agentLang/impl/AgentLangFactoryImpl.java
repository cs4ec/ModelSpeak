/**
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.modelspeak.agentLang.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.modelspeak.agentLang.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AgentLangFactoryImpl extends EFactoryImpl implements AgentLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AgentLangFactory init()
  {
    try
    {
      AgentLangFactory theAgentLangFactory = (AgentLangFactory)EPackage.Registry.INSTANCE.getEFactory(AgentLangPackage.eNS_URI);
      if (theAgentLangFactory != null)
      {
        return theAgentLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AgentLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AgentLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AgentLangPackage.GAME: return createGame();
      case AgentLangPackage.MOVE: return createMove();
      case AgentLangPackage.RESEARCH_QUESTION: return createResearchQuestion();
      case AgentLangPackage.MODEL: return createModel();
      case AgentLangPackage.REQUIREMENT: return createRequirement();
      case AgentLangPackage.EXPERIMENT: return createExperiment();
      case AgentLangPackage.THEORY: return createTheory();
      case AgentLangPackage.GENERAL_THEORY: return createGeneralTheory();
      case AgentLangPackage.LITERATURE_REFERENCE: return createLiteratureReference();
      case AgentLangPackage.PROPOSE_RQ: return createProposeRQ();
      case AgentLangPackage.PROPOSE_REQUIREMENT: return createProposeRequirement();
      case AgentLangPackage.ATTACK_REQUIREMENT: return createAttackRequirement();
      case AgentLangPackage.REDEFINE_REQUIREMENT: return createRedefineRequirement();
      case AgentLangPackage.RETRACT_REQUIREMENT: return createRetractRequirement();
      case AgentLangPackage.SUPPORT_REQUIREMENT: return createSupportRequirement();
      case AgentLangPackage.PROPOSE_MODEL: return createProposeModel();
      case AgentLangPackage.SUPPORT_MODEL: return createSupportModel();
      case AgentLangPackage.REPLACE_MODEL: return createReplaceModel();
      case AgentLangPackage.COUNTER_MODEL: return createCounterModel();
      case AgentLangPackage.ATTACK_MODEL: return createAttackModel();
      case AgentLangPackage.REVISE_REQUIREMENT: return createReviseRequirement();
      case AgentLangPackage.PROPOSE_EXPERIMENT: return createProposeExperiment();
      case AgentLangPackage.SUPPORT_EXPERIMENT: return createSupportExperiment();
      case AgentLangPackage.ATTACK_EXPERIMENT: return createAttackExperiment();
      case AgentLangPackage.RETRACT_EXPERIMENT: return createRetractExperiment();
      case AgentLangPackage.STUDY_DONE: return createStudyDone();
      case AgentLangPackage.NOT_CONVINCED: return createNotConvinced();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Game createGame()
  {
    GameImpl game = new GameImpl();
    return game;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Move createMove()
  {
    MoveImpl move = new MoveImpl();
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResearchQuestion createResearchQuestion()
  {
    ResearchQuestionImpl researchQuestion = new ResearchQuestionImpl();
    return researchQuestion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Experiment createExperiment()
  {
    ExperimentImpl experiment = new ExperimentImpl();
    return experiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Theory createTheory()
  {
    TheoryImpl theory = new TheoryImpl();
    return theory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneralTheory createGeneralTheory()
  {
    GeneralTheoryImpl generalTheory = new GeneralTheoryImpl();
    return generalTheory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteratureReference createLiteratureReference()
  {
    LiteratureReferenceImpl literatureReference = new LiteratureReferenceImpl();
    return literatureReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProposeRQ createProposeRQ()
  {
    ProposeRQImpl proposeRQ = new ProposeRQImpl();
    return proposeRQ;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProposeRequirement createProposeRequirement()
  {
    ProposeRequirementImpl proposeRequirement = new ProposeRequirementImpl();
    return proposeRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttackRequirement createAttackRequirement()
  {
    AttackRequirementImpl attackRequirement = new AttackRequirementImpl();
    return attackRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RedefineRequirement createRedefineRequirement()
  {
    RedefineRequirementImpl redefineRequirement = new RedefineRequirementImpl();
    return redefineRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RetractRequirement createRetractRequirement()
  {
    RetractRequirementImpl retractRequirement = new RetractRequirementImpl();
    return retractRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SupportRequirement createSupportRequirement()
  {
    SupportRequirementImpl supportRequirement = new SupportRequirementImpl();
    return supportRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProposeModel createProposeModel()
  {
    ProposeModelImpl proposeModel = new ProposeModelImpl();
    return proposeModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SupportModel createSupportModel()
  {
    SupportModelImpl supportModel = new SupportModelImpl();
    return supportModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReplaceModel createReplaceModel()
  {
    ReplaceModelImpl replaceModel = new ReplaceModelImpl();
    return replaceModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CounterModel createCounterModel()
  {
    CounterModelImpl counterModel = new CounterModelImpl();
    return counterModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttackModel createAttackModel()
  {
    AttackModelImpl attackModel = new AttackModelImpl();
    return attackModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReviseRequirement createReviseRequirement()
  {
    ReviseRequirementImpl reviseRequirement = new ReviseRequirementImpl();
    return reviseRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProposeExperiment createProposeExperiment()
  {
    ProposeExperimentImpl proposeExperiment = new ProposeExperimentImpl();
    return proposeExperiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SupportExperiment createSupportExperiment()
  {
    SupportExperimentImpl supportExperiment = new SupportExperimentImpl();
    return supportExperiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttackExperiment createAttackExperiment()
  {
    AttackExperimentImpl attackExperiment = new AttackExperimentImpl();
    return attackExperiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RetractExperiment createRetractExperiment()
  {
    RetractExperimentImpl retractExperiment = new RetractExperimentImpl();
    return retractExperiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StudyDone createStudyDone()
  {
    StudyDoneImpl studyDone = new StudyDoneImpl();
    return studyDone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotConvinced createNotConvinced()
  {
    NotConvincedImpl notConvinced = new NotConvincedImpl();
    return notConvinced;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AgentLangPackage getAgentLangPackage()
  {
    return (AgentLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AgentLangPackage getPackage()
  {
    return AgentLangPackage.eINSTANCE;
  }

} //AgentLangFactoryImpl
