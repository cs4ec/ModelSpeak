/**
 * generated by Xtext 2.36.0
 */
package uk.ac.kcl.inf.modelspeak.agentLang.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.modelspeak.agentLang.AgentLangPackage;
import uk.ac.kcl.inf.modelspeak.agentLang.Experiment;
import uk.ac.kcl.inf.modelspeak.agentLang.Model;
import uk.ac.kcl.inf.modelspeak.agentLang.ProposeExperiment;
import uk.ac.kcl.inf.modelspeak.agentLang.Requirement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Propose Experiment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.modelspeak.agentLang.impl.ProposeExperimentImpl#getModel <em>Model</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.modelspeak.agentLang.impl.ProposeExperimentImpl#getExperiment <em>Experiment</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.modelspeak.agentLang.impl.ProposeExperimentImpl#getRequirement <em>Requirement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProposeExperimentImpl extends MoveImpl implements ProposeExperiment
{
  /**
   * The cached value of the '{@link #getModel() <em>Model</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModel()
   * @generated
   * @ordered
   */
  protected Model model;

  /**
   * The cached value of the '{@link #getExperiment() <em>Experiment</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExperiment()
   * @generated
   * @ordered
   */
  protected Experiment experiment;

  /**
   * The cached value of the '{@link #getRequirement() <em>Requirement</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequirement()
   * @generated
   * @ordered
   */
  protected Requirement requirement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProposeExperimentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgentLangPackage.Literals.PROPOSE_EXPERIMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model getModel()
  {
    if (model != null && model.eIsProxy())
    {
      InternalEObject oldModel = (InternalEObject)model;
      model = (Model)eResolveProxy(oldModel);
      if (model != oldModel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AgentLangPackage.PROPOSE_EXPERIMENT__MODEL, oldModel, model));
      }
    }
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model basicGetModel()
  {
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModel(Model newModel)
  {
    Model oldModel = model;
    model = newModel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgentLangPackage.PROPOSE_EXPERIMENT__MODEL, oldModel, model));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Experiment getExperiment()
  {
    return experiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExperiment(Experiment newExperiment, NotificationChain msgs)
  {
    Experiment oldExperiment = experiment;
    experiment = newExperiment;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgentLangPackage.PROPOSE_EXPERIMENT__EXPERIMENT, oldExperiment, newExperiment);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExperiment(Experiment newExperiment)
  {
    if (newExperiment != experiment)
    {
      NotificationChain msgs = null;
      if (experiment != null)
        msgs = ((InternalEObject)experiment).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgentLangPackage.PROPOSE_EXPERIMENT__EXPERIMENT, null, msgs);
      if (newExperiment != null)
        msgs = ((InternalEObject)newExperiment).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgentLangPackage.PROPOSE_EXPERIMENT__EXPERIMENT, null, msgs);
      msgs = basicSetExperiment(newExperiment, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgentLangPackage.PROPOSE_EXPERIMENT__EXPERIMENT, newExperiment, newExperiment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requirement getRequirement()
  {
    if (requirement != null && requirement.eIsProxy())
    {
      InternalEObject oldRequirement = (InternalEObject)requirement;
      requirement = (Requirement)eResolveProxy(oldRequirement);
      if (requirement != oldRequirement)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AgentLangPackage.PROPOSE_EXPERIMENT__REQUIREMENT, oldRequirement, requirement));
      }
    }
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Requirement basicGetRequirement()
  {
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRequirement(Requirement newRequirement)
  {
    Requirement oldRequirement = requirement;
    requirement = newRequirement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgentLangPackage.PROPOSE_EXPERIMENT__REQUIREMENT, oldRequirement, requirement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_EXPERIMENT__EXPERIMENT:
        return basicSetExperiment(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_EXPERIMENT__MODEL:
        if (resolve) return getModel();
        return basicGetModel();
      case AgentLangPackage.PROPOSE_EXPERIMENT__EXPERIMENT:
        return getExperiment();
      case AgentLangPackage.PROPOSE_EXPERIMENT__REQUIREMENT:
        if (resolve) return getRequirement();
        return basicGetRequirement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_EXPERIMENT__MODEL:
        setModel((Model)newValue);
        return;
      case AgentLangPackage.PROPOSE_EXPERIMENT__EXPERIMENT:
        setExperiment((Experiment)newValue);
        return;
      case AgentLangPackage.PROPOSE_EXPERIMENT__REQUIREMENT:
        setRequirement((Requirement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_EXPERIMENT__MODEL:
        setModel((Model)null);
        return;
      case AgentLangPackage.PROPOSE_EXPERIMENT__EXPERIMENT:
        setExperiment((Experiment)null);
        return;
      case AgentLangPackage.PROPOSE_EXPERIMENT__REQUIREMENT:
        setRequirement((Requirement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_EXPERIMENT__MODEL:
        return model != null;
      case AgentLangPackage.PROPOSE_EXPERIMENT__EXPERIMENT:
        return experiment != null;
      case AgentLangPackage.PROPOSE_EXPERIMENT__REQUIREMENT:
        return requirement != null;
    }
    return super.eIsSet(featureID);
  }

} //ProposeExperimentImpl
