/**
 * generated by Xtext 2.36.0
 */
package uk.ac.kcl.inf.modelspeak.agentLang.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.modelspeak.agentLang.AgentLangPackage;
import uk.ac.kcl.inf.modelspeak.agentLang.ProposeRQ;
import uk.ac.kcl.inf.modelspeak.agentLang.ResearchQuestion;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Propose RQ</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.modelspeak.agentLang.impl.ProposeRQImpl#getRq <em>Rq</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProposeRQImpl extends MoveImpl implements ProposeRQ
{
  /**
   * The cached value of the '{@link #getRq() <em>Rq</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRq()
   * @generated
   * @ordered
   */
  protected ResearchQuestion rq;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProposeRQImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgentLangPackage.Literals.PROPOSE_RQ;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResearchQuestion getRq()
  {
    return rq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRq(ResearchQuestion newRq, NotificationChain msgs)
  {
    ResearchQuestion oldRq = rq;
    rq = newRq;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgentLangPackage.PROPOSE_RQ__RQ, oldRq, newRq);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRq(ResearchQuestion newRq)
  {
    if (newRq != rq)
    {
      NotificationChain msgs = null;
      if (rq != null)
        msgs = ((InternalEObject)rq).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgentLangPackage.PROPOSE_RQ__RQ, null, msgs);
      if (newRq != null)
        msgs = ((InternalEObject)newRq).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgentLangPackage.PROPOSE_RQ__RQ, null, msgs);
      msgs = basicSetRq(newRq, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgentLangPackage.PROPOSE_RQ__RQ, newRq, newRq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_RQ__RQ:
        return basicSetRq(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_RQ__RQ:
        return getRq();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_RQ__RQ:
        setRq((ResearchQuestion)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_RQ__RQ:
        setRq((ResearchQuestion)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgentLangPackage.PROPOSE_RQ__RQ:
        return rq != null;
    }
    return super.eIsSet(featureID);
  }

} //ProposeRQImpl
