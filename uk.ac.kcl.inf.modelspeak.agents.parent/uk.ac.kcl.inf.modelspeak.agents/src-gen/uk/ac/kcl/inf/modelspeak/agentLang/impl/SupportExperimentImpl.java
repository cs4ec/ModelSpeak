/**
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.modelspeak.agentLang.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.modelspeak.agentLang.AgentLangPackage;
import uk.ac.kcl.inf.modelspeak.agentLang.Experiment;
import uk.ac.kcl.inf.modelspeak.agentLang.SupportExperiment;
import uk.ac.kcl.inf.modelspeak.agentLang.Theory;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Support Experiment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.modelspeak.agentLang.impl.SupportExperimentImpl#getExperiment <em>Experiment</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.modelspeak.agentLang.impl.SupportExperimentImpl#getTheory <em>Theory</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SupportExperimentImpl extends MoveImpl implements SupportExperiment
{
  /**
   * The cached value of the '{@link #getExperiment() <em>Experiment</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExperiment()
   * @generated
   * @ordered
   */
  protected Experiment experiment;

  /**
   * The cached value of the '{@link #getTheory() <em>Theory</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTheory()
   * @generated
   * @ordered
   */
  protected Theory theory;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SupportExperimentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgentLangPackage.Literals.SUPPORT_EXPERIMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Experiment getExperiment()
  {
    if (experiment != null && experiment.eIsProxy())
    {
      InternalEObject oldExperiment = (InternalEObject)experiment;
      experiment = (Experiment)eResolveProxy(oldExperiment);
      if (experiment != oldExperiment)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AgentLangPackage.SUPPORT_EXPERIMENT__EXPERIMENT, oldExperiment, experiment));
      }
    }
    return experiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Experiment basicGetExperiment()
  {
    return experiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExperiment(Experiment newExperiment)
  {
    Experiment oldExperiment = experiment;
    experiment = newExperiment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgentLangPackage.SUPPORT_EXPERIMENT__EXPERIMENT, oldExperiment, experiment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Theory getTheory()
  {
    return theory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTheory(Theory newTheory, NotificationChain msgs)
  {
    Theory oldTheory = theory;
    theory = newTheory;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgentLangPackage.SUPPORT_EXPERIMENT__THEORY, oldTheory, newTheory);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTheory(Theory newTheory)
  {
    if (newTheory != theory)
    {
      NotificationChain msgs = null;
      if (theory != null)
        msgs = ((InternalEObject)theory).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgentLangPackage.SUPPORT_EXPERIMENT__THEORY, null, msgs);
      if (newTheory != null)
        msgs = ((InternalEObject)newTheory).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgentLangPackage.SUPPORT_EXPERIMENT__THEORY, null, msgs);
      msgs = basicSetTheory(newTheory, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgentLangPackage.SUPPORT_EXPERIMENT__THEORY, newTheory, newTheory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AgentLangPackage.SUPPORT_EXPERIMENT__THEORY:
        return basicSetTheory(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgentLangPackage.SUPPORT_EXPERIMENT__EXPERIMENT:
        if (resolve) return getExperiment();
        return basicGetExperiment();
      case AgentLangPackage.SUPPORT_EXPERIMENT__THEORY:
        return getTheory();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgentLangPackage.SUPPORT_EXPERIMENT__EXPERIMENT:
        setExperiment((Experiment)newValue);
        return;
      case AgentLangPackage.SUPPORT_EXPERIMENT__THEORY:
        setTheory((Theory)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgentLangPackage.SUPPORT_EXPERIMENT__EXPERIMENT:
        setExperiment((Experiment)null);
        return;
      case AgentLangPackage.SUPPORT_EXPERIMENT__THEORY:
        setTheory((Theory)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgentLangPackage.SUPPORT_EXPERIMENT__EXPERIMENT:
        return experiment != null;
      case AgentLangPackage.SUPPORT_EXPERIMENT__THEORY:
        return theory != null;
    }
    return super.eIsSet(featureID);
  }

} //SupportExperimentImpl
