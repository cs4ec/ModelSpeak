/**
 * generated by Xtext 2.36.0
 */
package uk.ac.kcl.inf.modelspeak.agentLang.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import uk.ac.kcl.inf.modelspeak.agentLang.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see uk.ac.kcl.inf.modelspeak.agentLang.AgentLangPackage
 * @generated
 */
public class AgentLangSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AgentLangPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AgentLangSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AgentLangPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AgentLangPackage.GAME:
      {
        Game game = (Game)theEObject;
        T result = caseGame(game);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.MOVE:
      {
        Move move = (Move)theEObject;
        T result = caseMove(move);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.RESEARCH_QUESTION:
      {
        ResearchQuestion researchQuestion = (ResearchQuestion)theEObject;
        T result = caseResearchQuestion(researchQuestion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.REQUIREMENT:
      {
        Requirement requirement = (Requirement)theEObject;
        T result = caseRequirement(requirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.EXPERIMENT:
      {
        Experiment experiment = (Experiment)theEObject;
        T result = caseExperiment(experiment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.THEORY:
      {
        Theory theory = (Theory)theEObject;
        T result = caseTheory(theory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.MULTI_THEORY:
      {
        MultiTheory multiTheory = (MultiTheory)theEObject;
        T result = caseMultiTheory(multiTheory);
        if (result == null) result = caseTheory(multiTheory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.GENERAL_THEORY:
      {
        GeneralTheory generalTheory = (GeneralTheory)theEObject;
        T result = caseGeneralTheory(generalTheory);
        if (result == null) result = caseTheory(generalTheory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.LITERATURE_REFERENCE_THEORY:
      {
        LiteratureReferenceTheory literatureReferenceTheory = (LiteratureReferenceTheory)theEObject;
        T result = caseLiteratureReferenceTheory(literatureReferenceTheory);
        if (result == null) result = caseTheory(literatureReferenceTheory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.LITERATURE_REFERENCE:
      {
        LiteratureReference literatureReference = (LiteratureReference)theEObject;
        T result = caseLiteratureReference(literatureReference);
        if (result == null) result = caseLiteratureReferenceTheory(literatureReference);
        if (result == null) result = caseTheory(literatureReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.LITERATURE_REFERENCE_FOR_DATA:
      {
        LiteratureReferenceForData literatureReferenceForData = (LiteratureReferenceForData)theEObject;
        T result = caseLiteratureReferenceForData(literatureReferenceForData);
        if (result == null) result = caseLiteratureReferenceTheory(literatureReferenceForData);
        if (result == null) result = caseTheory(literatureReferenceForData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.PROPOSE_RQ:
      {
        ProposeRQ proposeRQ = (ProposeRQ)theEObject;
        T result = caseProposeRQ(proposeRQ);
        if (result == null) result = caseMove(proposeRQ);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.PROPOSE_REQUIREMENT:
      {
        ProposeRequirement proposeRequirement = (ProposeRequirement)theEObject;
        T result = caseProposeRequirement(proposeRequirement);
        if (result == null) result = caseMove(proposeRequirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.ATTACK_REQUIREMENT:
      {
        AttackRequirement attackRequirement = (AttackRequirement)theEObject;
        T result = caseAttackRequirement(attackRequirement);
        if (result == null) result = caseMove(attackRequirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.REDEFINE_REQUIREMENT:
      {
        RedefineRequirement redefineRequirement = (RedefineRequirement)theEObject;
        T result = caseRedefineRequirement(redefineRequirement);
        if (result == null) result = caseMove(redefineRequirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.RETRACT_REQUIREMENT:
      {
        RetractRequirement retractRequirement = (RetractRequirement)theEObject;
        T result = caseRetractRequirement(retractRequirement);
        if (result == null) result = caseMove(retractRequirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.SUPPORT_REQUIREMENT:
      {
        SupportRequirement supportRequirement = (SupportRequirement)theEObject;
        T result = caseSupportRequirement(supportRequirement);
        if (result == null) result = caseMove(supportRequirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.PROPOSE_MODEL:
      {
        ProposeModel proposeModel = (ProposeModel)theEObject;
        T result = caseProposeModel(proposeModel);
        if (result == null) result = caseMove(proposeModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.SUPPORT_MODEL:
      {
        SupportModel supportModel = (SupportModel)theEObject;
        T result = caseSupportModel(supportModel);
        if (result == null) result = caseMove(supportModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.REPLACE_MODEL:
      {
        ReplaceModel replaceModel = (ReplaceModel)theEObject;
        T result = caseReplaceModel(replaceModel);
        if (result == null) result = caseMove(replaceModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.COUNTER_MODEL:
      {
        CounterModel counterModel = (CounterModel)theEObject;
        T result = caseCounterModel(counterModel);
        if (result == null) result = caseMove(counterModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.ATTACK_MODEL:
      {
        AttackModel attackModel = (AttackModel)theEObject;
        T result = caseAttackModel(attackModel);
        if (result == null) result = caseMove(attackModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.REVISE_REQUIREMENT:
      {
        ReviseRequirement reviseRequirement = (ReviseRequirement)theEObject;
        T result = caseReviseRequirement(reviseRequirement);
        if (result == null) result = caseMove(reviseRequirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.PROPOSE_EXPERIMENT:
      {
        ProposeExperiment proposeExperiment = (ProposeExperiment)theEObject;
        T result = caseProposeExperiment(proposeExperiment);
        if (result == null) result = caseMove(proposeExperiment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.SUPPORT_EXPERIMENT:
      {
        SupportExperiment supportExperiment = (SupportExperiment)theEObject;
        T result = caseSupportExperiment(supportExperiment);
        if (result == null) result = caseMove(supportExperiment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.ATTACK_EXPERIMENT:
      {
        AttackExperiment attackExperiment = (AttackExperiment)theEObject;
        T result = caseAttackExperiment(attackExperiment);
        if (result == null) result = caseMove(attackExperiment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.RETRACT_EXPERIMENT:
      {
        RetractExperiment retractExperiment = (RetractExperiment)theEObject;
        T result = caseRetractExperiment(retractExperiment);
        if (result == null) result = caseMove(retractExperiment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.STUDY_DONE:
      {
        StudyDone studyDone = (StudyDone)theEObject;
        T result = caseStudyDone(studyDone);
        if (result == null) result = caseMove(studyDone);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AgentLangPackage.NOT_CONVINCED:
      {
        NotConvinced notConvinced = (NotConvinced)theEObject;
        T result = caseNotConvinced(notConvinced);
        if (result == null) result = caseMove(notConvinced);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Game</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Game</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGame(Game object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Move</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Move</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMove(Move object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Research Question</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Research Question</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResearchQuestion(ResearchQuestion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequirement(Requirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Experiment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Experiment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExperiment(Experiment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Theory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Theory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTheory(Theory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Theory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Theory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiTheory(MultiTheory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>General Theory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>General Theory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneralTheory(GeneralTheory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literature Reference Theory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literature Reference Theory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteratureReferenceTheory(LiteratureReferenceTheory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literature Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literature Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteratureReference(LiteratureReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literature Reference For Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literature Reference For Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteratureReferenceForData(LiteratureReferenceForData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Propose RQ</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Propose RQ</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProposeRQ(ProposeRQ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Propose Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Propose Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProposeRequirement(ProposeRequirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attack Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attack Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttackRequirement(AttackRequirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Redefine Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Redefine Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRedefineRequirement(RedefineRequirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Retract Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Retract Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRetractRequirement(RetractRequirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Support Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Support Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSupportRequirement(SupportRequirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Propose Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Propose Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProposeModel(ProposeModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Support Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Support Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSupportModel(SupportModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Replace Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Replace Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReplaceModel(ReplaceModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Counter Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Counter Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCounterModel(CounterModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attack Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attack Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttackModel(AttackModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Revise Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Revise Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReviseRequirement(ReviseRequirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Propose Experiment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Propose Experiment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProposeExperiment(ProposeExperiment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Support Experiment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Support Experiment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSupportExperiment(SupportExperiment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attack Experiment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attack Experiment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttackExperiment(AttackExperiment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Retract Experiment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Retract Experiment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRetractExperiment(RetractExperiment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Study Done</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Study Done</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStudyDone(StudyDone object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Convinced</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Convinced</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotConvinced(NotConvinced object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AgentLangSwitch
