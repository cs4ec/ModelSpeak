/*
 * generated by Xtext 2.35.0
 */
grammar InternalAgentLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.modelspeak.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.modelspeak.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.modelspeak.services.AgentLangGrammarAccess;

}

@parser::members {

 	private AgentLangGrammarAccess grammarAccess;

    public InternalAgentLangParser(TokenStream input, AgentLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Game";
   	}

   	@Override
   	protected AgentLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGame
entryRuleGame returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGameRule()); }
	iv_ruleGame=ruleGame
	{ $current=$iv_ruleGame.current; }
	EOF;

// Rule Game
ruleGame returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getGameAccess().getMovesMoveParserRuleCall_0());
			}
			lv_moves_0_0=ruleMove
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getGameRule());
				}
				add(
					$current,
					"moves",
					lv_moves_0_0,
					"uk.ac.kcl.inf.modelspeak.AgentLang.Move");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMoveAccess().getProposeRequirementParserRuleCall_0());
		}
		this_ProposeRequirement_0=ruleProposeRequirement
		{
			$current = $this_ProposeRequirement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getAttackRequirementParserRuleCall_1());
		}
		this_AttackRequirement_1=ruleAttackRequirement
		{
			$current = $this_AttackRequirement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getRedefineRequirementParserRuleCall_2());
		}
		this_RedefineRequirement_2=ruleRedefineRequirement
		{
			$current = $this_RedefineRequirement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getRetractRequirementParserRuleCall_3());
		}
		this_RetractRequirement_3=ruleRetractRequirement
		{
			$current = $this_RetractRequirement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getSupportRequirementParserRuleCall_4());
		}
		this_SupportRequirement_4=ruleSupportRequirement
		{
			$current = $this_SupportRequirement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getProposeModelParserRuleCall_5());
		}
		this_ProposeModel_5=ruleProposeModel
		{
			$current = $this_ProposeModel_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getSupportModelParserRuleCall_6());
		}
		this_SupportModel_6=ruleSupportModel
		{
			$current = $this_SupportModel_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getReplaceModelParserRuleCall_7());
		}
		this_ReplaceModel_7=ruleReplaceModel
		{
			$current = $this_ReplaceModel_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getCounterModelParserRuleCall_8());
		}
		this_CounterModel_8=ruleCounterModel
		{
			$current = $this_CounterModel_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getAttackModelParserRuleCall_9());
		}
		this_AttackModel_9=ruleAttackModel
		{
			$current = $this_AttackModel_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getReviseRequirementParserRuleCall_10());
		}
		this_ReviseRequirement_10=ruleReviseRequirement
		{
			$current = $this_ReviseRequirement_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getProposeExperimentParserRuleCall_11());
		}
		this_ProposeExperiment_11=ruleProposeExperiment
		{
			$current = $this_ProposeExperiment_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getSupportExperimentParserRuleCall_12());
		}
		this_SupportExperiment_12=ruleSupportExperiment
		{
			$current = $this_SupportExperiment_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getAttackExperimentParserRuleCall_13());
		}
		this_AttackExperiment_13=ruleAttackExperiment
		{
			$current = $this_AttackExperiment_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getRetractExperimentParserRuleCall_14());
		}
		this_RetractExperiment_14=ruleRetractExperiment
		{
			$current = $this_RetractExperiment_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getStudyDoneParserRuleCall_15());
		}
		this_StudyDone_15=ruleStudyDone
		{
			$current = $this_StudyDone_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getNotConvincedParserRuleCall_16());
		}
		this_NotConvinced_16=ruleNotConvinced
		{
			$current = $this_NotConvinced_16.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_content_2_0=RULE_STRING
				{
					newLeafNode(lv_content_2_0, grammarAccess.getModelAccess().getContentSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getModelAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	iv_ruleRequirement=ruleRequirement
	{ $current=$iv_ruleRequirement.current; }
	EOF;

// Rule Requirement
ruleRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRequirementAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequirementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getRequirementAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_content_2_0=RULE_STRING
				{
					newLeafNode(lv_content_2_0, grammarAccess.getRequirementAccess().getContentSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequirementRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getRequirementAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleExperiment
entryRuleExperiment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExperimentRule()); }
	iv_ruleExperiment=ruleExperiment
	{ $current=$iv_ruleExperiment.current; }
	EOF;

// Rule Experiment
ruleExperiment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getExperimentAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExperimentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getExperimentAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_content_2_0=RULE_STRING
				{
					newLeafNode(lv_content_2_0, grammarAccess.getExperimentAccess().getContentSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExperimentRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getExperimentAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleTheory
entryRuleTheory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheoryRule()); }
	iv_ruleTheory=ruleTheory
	{ $current=$iv_ruleTheory.current; }
	EOF;

// Rule Theory
ruleTheory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTheoryAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTheoryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getTheoryAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_content_2_0=RULE_STRING
				{
					newLeafNode(lv_content_2_0, grammarAccess.getTheoryAccess().getContentSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTheoryRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getTheoryAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleProposeRequirement
entryRuleProposeRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProposeRequirementRule()); }
	iv_ruleProposeRequirement=ruleProposeRequirement
	{ $current=$iv_ruleProposeRequirement.current; }
	EOF;

// Rule ProposeRequirement
ruleProposeRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ProposeRequirement'
		{
			newLeafNode(otherlv_0, grammarAccess.getProposeRequirementAccess().getProposeRequirementKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getProposeRequirementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProposeRequirementAccess().getRequirementRequirementParserRuleCall_2_0());
				}
				lv_requirement_2_0=ruleRequirement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProposeRequirementRule());
					}
					set(
						$current,
						"requirement",
						lv_requirement_2_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Requirement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getProposeRequirementAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAttackRequirement
entryRuleAttackRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttackRequirementRule()); }
	iv_ruleAttackRequirement=ruleAttackRequirement
	{ $current=$iv_ruleAttackRequirement.current; }
	EOF;

// Rule AttackRequirement
ruleAttackRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='AttackRequirement'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttackRequirementAccess().getAttackRequirementKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAttackRequirementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttackRequirementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAttackRequirementAccess().getRequirementRequirementCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getAttackRequirementAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttackRequirementAccess().getTheoryTheoryParserRuleCall_4_0());
				}
				lv_theory_4_0=ruleTheory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttackRequirementRule());
					}
					set(
						$current,
						"theory",
						lv_theory_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Theory");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAttackRequirementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleRedefineRequirement
entryRuleRedefineRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRedefineRequirementRule()); }
	iv_ruleRedefineRequirement=ruleRedefineRequirement
	{ $current=$iv_ruleRedefineRequirement.current; }
	EOF;

// Rule RedefineRequirement
ruleRedefineRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RedefineRequirement'
		{
			newLeafNode(otherlv_0, grammarAccess.getRedefineRequirementAccess().getRedefineRequirementKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRedefineRequirementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRedefineRequirementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getRedefineRequirementAccess().getRequirementRequirementCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getRedefineRequirementAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRedefineRequirementAccess().getNewRequirementRequirementParserRuleCall_4_0());
				}
				lv_newRequirement_4_0=ruleRequirement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRedefineRequirementRule());
					}
					set(
						$current,
						"newRequirement",
						lv_newRequirement_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Requirement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRedefineRequirementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleRetractRequirement
entryRuleRetractRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRetractRequirementRule()); }
	iv_ruleRetractRequirement=ruleRetractRequirement
	{ $current=$iv_ruleRetractRequirement.current; }
	EOF;

// Rule RetractRequirement
ruleRetractRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RetractRequirement'
		{
			newLeafNode(otherlv_0, grammarAccess.getRetractRequirementAccess().getRetractRequirementKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRetractRequirementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRetractRequirementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getRetractRequirementAccess().getRequirementRequirementCrossReference_2_0());
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRetractRequirementAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSupportRequirement
entryRuleSupportRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSupportRequirementRule()); }
	iv_ruleSupportRequirement=ruleSupportRequirement
	{ $current=$iv_ruleSupportRequirement.current; }
	EOF;

// Rule SupportRequirement
ruleSupportRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SupportRequirement'
		{
			newLeafNode(otherlv_0, grammarAccess.getSupportRequirementAccess().getSupportRequirementKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSupportRequirementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSupportRequirementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getSupportRequirementAccess().getRequirementRequirementCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSupportRequirementAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSupportRequirementAccess().getTheoryTheoryParserRuleCall_4_0());
				}
				lv_theory_4_0=ruleTheory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSupportRequirementRule());
					}
					set(
						$current,
						"theory",
						lv_theory_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Theory");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSupportRequirementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleProposeModel
entryRuleProposeModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProposeModelRule()); }
	iv_ruleProposeModel=ruleProposeModel
	{ $current=$iv_ruleProposeModel.current; }
	EOF;

// Rule ProposeModel
ruleProposeModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ProposeModel'
		{
			newLeafNode(otherlv_0, grammarAccess.getProposeModelAccess().getProposeModelKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getProposeModelAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProposeModelAccess().getModelModelParserRuleCall_2_0());
				}
				lv_model_2_0=ruleModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProposeModelRule());
					}
					set(
						$current,
						"model",
						lv_model_2_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Model");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getProposeModelAccess().getCommaKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProposeModelRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getProposeModelAccess().getRequirementRequirementCrossReference_4_0());
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getProposeModelAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleSupportModel
entryRuleSupportModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSupportModelRule()); }
	iv_ruleSupportModel=ruleSupportModel
	{ $current=$iv_ruleSupportModel.current; }
	EOF;

// Rule SupportModel
ruleSupportModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SupportModel'
		{
			newLeafNode(otherlv_0, grammarAccess.getSupportModelAccess().getSupportModelKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSupportModelAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSupportModelRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getSupportModelAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSupportModelAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSupportModelAccess().getTheoryTheoryParserRuleCall_4_0());
				}
				lv_theory_4_0=ruleTheory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSupportModelRule());
					}
					set(
						$current,
						"theory",
						lv_theory_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Theory");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSupportModelAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleReplaceModel
entryRuleReplaceModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReplaceModelRule()); }
	iv_ruleReplaceModel=ruleReplaceModel
	{ $current=$iv_ruleReplaceModel.current; }
	EOF;

// Rule ReplaceModel
ruleReplaceModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ReplaceModel'
		{
			newLeafNode(otherlv_0, grammarAccess.getReplaceModelAccess().getReplaceModelKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getReplaceModelAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReplaceModelRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getReplaceModelAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getReplaceModelAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReplaceModelAccess().getNewModelModelParserRuleCall_4_0());
				}
				lv_newModel_4_0=ruleModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReplaceModelRule());
					}
					set(
						$current,
						"newModel",
						lv_newModel_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Model");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getReplaceModelAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleCounterModel
entryRuleCounterModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCounterModelRule()); }
	iv_ruleCounterModel=ruleCounterModel
	{ $current=$iv_ruleCounterModel.current; }
	EOF;

// Rule CounterModel
ruleCounterModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CounterModel'
		{
			newLeafNode(otherlv_0, grammarAccess.getCounterModelAccess().getCounterModelKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCounterModelAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCounterModelRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getCounterModelAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getCounterModelAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCounterModelAccess().getExperimentExperimentParserRuleCall_4_0());
				}
				lv_experiment_4_0=ruleExperiment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCounterModelRule());
					}
					set(
						$current,
						"experiment",
						lv_experiment_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Experiment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getCounterModelAccess().getCommaKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCounterModelRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getCounterModelAccess().getRequirementRequirementCrossReference_6_0());
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getCounterModelAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleAttackModel
entryRuleAttackModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttackModelRule()); }
	iv_ruleAttackModel=ruleAttackModel
	{ $current=$iv_ruleAttackModel.current; }
	EOF;

// Rule AttackModel
ruleAttackModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='AttackModel'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttackModelAccess().getAttackModelKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAttackModelAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttackModelRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAttackModelAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getAttackModelAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttackModelAccess().getTheoryTheoryParserRuleCall_4_0());
				}
				lv_theory_4_0=ruleTheory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttackModelRule());
					}
					set(
						$current,
						"theory",
						lv_theory_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Theory");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAttackModelAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleReviseRequirement
entryRuleReviseRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReviseRequirementRule()); }
	iv_ruleReviseRequirement=ruleReviseRequirement
	{ $current=$iv_ruleReviseRequirement.current; }
	EOF;

// Rule ReviseRequirement
ruleReviseRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ReviseRequirement'
		{
			newLeafNode(otherlv_0, grammarAccess.getReviseRequirementAccess().getReviseRequirementKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getReviseRequirementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReviseRequirementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getReviseRequirementAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getReviseRequirementAccess().getCommaKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReviseRequirementRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getReviseRequirementAccess().getRequirementRequirementCrossReference_4_0());
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getReviseRequirementAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReviseRequirementAccess().getNewRequirementRequirementParserRuleCall_6_0());
				}
				lv_newRequirement_6_0=ruleRequirement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReviseRequirementRule());
					}
					set(
						$current,
						"newRequirement",
						lv_newRequirement_6_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Requirement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getReviseRequirementAccess().getCommaKeyword_7());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReviseRequirementRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getReviseRequirementAccess().getExperimentExperimentCrossReference_8_0());
				}
			)
		)
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getReviseRequirementAccess().getRightParenthesisKeyword_9());
		}
	)
;

// Entry rule entryRuleProposeExperiment
entryRuleProposeExperiment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProposeExperimentRule()); }
	iv_ruleProposeExperiment=ruleProposeExperiment
	{ $current=$iv_ruleProposeExperiment.current; }
	EOF;

// Rule ProposeExperiment
ruleProposeExperiment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ProposeExperiment'
		{
			newLeafNode(otherlv_0, grammarAccess.getProposeExperimentAccess().getProposeExperimentKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getProposeExperimentAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProposeExperimentRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getProposeExperimentAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getProposeExperimentAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProposeExperimentAccess().getExperimentExperimentParserRuleCall_4_0());
				}
				lv_experiment_4_0=ruleExperiment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProposeExperimentRule());
					}
					set(
						$current,
						"experiment",
						lv_experiment_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Experiment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getProposeExperimentAccess().getCommaKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProposeExperimentRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getProposeExperimentAccess().getRequirementRequirementCrossReference_6_0());
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getProposeExperimentAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleSupportExperiment
entryRuleSupportExperiment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSupportExperimentRule()); }
	iv_ruleSupportExperiment=ruleSupportExperiment
	{ $current=$iv_ruleSupportExperiment.current; }
	EOF;

// Rule SupportExperiment
ruleSupportExperiment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SupportExperiment'
		{
			newLeafNode(otherlv_0, grammarAccess.getSupportExperimentAccess().getSupportExperimentKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSupportExperimentAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSupportExperimentRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getSupportExperimentAccess().getExperimentExperimentCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSupportExperimentAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSupportExperimentAccess().getTheoryTheoryParserRuleCall_4_0());
				}
				lv_theory_4_0=ruleTheory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSupportExperimentRule());
					}
					set(
						$current,
						"theory",
						lv_theory_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Theory");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSupportExperimentAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleAttackExperiment
entryRuleAttackExperiment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttackExperimentRule()); }
	iv_ruleAttackExperiment=ruleAttackExperiment
	{ $current=$iv_ruleAttackExperiment.current; }
	EOF;

// Rule AttackExperiment
ruleAttackExperiment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='AttackExperiment'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttackExperimentAccess().getAttackExperimentKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAttackExperimentAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttackExperimentRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAttackExperimentAccess().getExperimentExperimentCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getAttackExperimentAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttackExperimentAccess().getTheoryTheoryParserRuleCall_4_0());
				}
				lv_theory_4_0=ruleTheory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttackExperimentRule());
					}
					set(
						$current,
						"theory",
						lv_theory_4_0,
						"uk.ac.kcl.inf.modelspeak.AgentLang.Theory");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAttackExperimentAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleRetractExperiment
entryRuleRetractExperiment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRetractExperimentRule()); }
	iv_ruleRetractExperiment=ruleRetractExperiment
	{ $current=$iv_ruleRetractExperiment.current; }
	EOF;

// Rule RetractExperiment
ruleRetractExperiment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RetractExperiment'
		{
			newLeafNode(otherlv_0, grammarAccess.getRetractExperimentAccess().getRetractExperimentKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRetractExperimentAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRetractExperimentRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getRetractExperimentAccess().getExperimentExperimentCrossReference_2_0());
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRetractExperimentAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleStudyDone
entryRuleStudyDone returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStudyDoneRule()); }
	iv_ruleStudyDone=ruleStudyDone
	{ $current=$iv_ruleStudyDone.current; }
	EOF;

// Rule StudyDone
ruleStudyDone returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStudyDoneAccess().getStudyDoneAction_0(),
					$current);
			}
		)
		otherlv_1='StudyDone'
		{
			newLeafNode(otherlv_1, grammarAccess.getStudyDoneAccess().getStudyDoneKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getStudyDoneAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getStudyDoneAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleNotConvinced
entryRuleNotConvinced returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotConvincedRule()); }
	iv_ruleNotConvinced=ruleNotConvinced
	{ $current=$iv_ruleNotConvinced.current; }
	EOF;

// Rule NotConvinced
ruleNotConvinced returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='NotConvinced'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotConvincedAccess().getNotConvincedKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getNotConvincedAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotConvincedRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getNotConvincedAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNotConvincedAccess().getRightParenthesisKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
