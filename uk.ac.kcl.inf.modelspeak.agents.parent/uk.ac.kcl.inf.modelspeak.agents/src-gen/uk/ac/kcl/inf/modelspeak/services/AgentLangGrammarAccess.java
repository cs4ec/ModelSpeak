/*
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.modelspeak.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AgentLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.Game");
		private final Assignment cMovesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMovesMoveParserRuleCall_0 = (RuleCall)cMovesAssignment.eContents().get(0);
		
		//Game:
		//    moves+=Move*;
		@Override public ParserRule getRule() { return rule; }
		
		//moves+=Move*
		public Assignment getMovesAssignment() { return cMovesAssignment; }
		
		//Move
		public RuleCall getMovesMoveParserRuleCall_0() { return cMovesMoveParserRuleCall_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.Move");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProposeRQParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProposeRequirementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttackRequirementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRedefineRequirementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRetractRequirementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSupportRequirementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProposeModelParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSupportModelParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cReplaceModelParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCounterModelParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAttackModelParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cReviseRequirementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cProposeExperimentParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSupportExperimentParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cAttackExperimentParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cRetractExperimentParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cStudyDoneParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cNotConvincedParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//Move:
		//    ProposeRQ |
		//    ProposeRequirement | AttackRequirement | RedefineRequirement | RetractRequirement |
		//    SupportRequirement | ProposeModel | SupportModel | ReplaceModel | CounterModel |
		//    AttackModel | ReviseRequirement | ProposeExperiment | SupportExperiment |
		//    AttackExperiment | RetractExperiment | StudyDone | NotConvinced;
		@Override public ParserRule getRule() { return rule; }
		
		//ProposeRQ |
		//ProposeRequirement | AttackRequirement | RedefineRequirement | RetractRequirement |
		//SupportRequirement | ProposeModel | SupportModel | ReplaceModel | CounterModel |
		//AttackModel | ReviseRequirement | ProposeExperiment | SupportExperiment |
		//AttackExperiment | RetractExperiment | StudyDone | NotConvinced
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProposeRQ
		public RuleCall getProposeRQParserRuleCall_0() { return cProposeRQParserRuleCall_0; }
		
		//ProposeRequirement
		public RuleCall getProposeRequirementParserRuleCall_1() { return cProposeRequirementParserRuleCall_1; }
		
		//AttackRequirement
		public RuleCall getAttackRequirementParserRuleCall_2() { return cAttackRequirementParserRuleCall_2; }
		
		//RedefineRequirement
		public RuleCall getRedefineRequirementParserRuleCall_3() { return cRedefineRequirementParserRuleCall_3; }
		
		//RetractRequirement
		public RuleCall getRetractRequirementParserRuleCall_4() { return cRetractRequirementParserRuleCall_4; }
		
		//SupportRequirement
		public RuleCall getSupportRequirementParserRuleCall_5() { return cSupportRequirementParserRuleCall_5; }
		
		//ProposeModel
		public RuleCall getProposeModelParserRuleCall_6() { return cProposeModelParserRuleCall_6; }
		
		//SupportModel
		public RuleCall getSupportModelParserRuleCall_7() { return cSupportModelParserRuleCall_7; }
		
		//ReplaceModel
		public RuleCall getReplaceModelParserRuleCall_8() { return cReplaceModelParserRuleCall_8; }
		
		//CounterModel
		public RuleCall getCounterModelParserRuleCall_9() { return cCounterModelParserRuleCall_9; }
		
		//AttackModel
		public RuleCall getAttackModelParserRuleCall_10() { return cAttackModelParserRuleCall_10; }
		
		//ReviseRequirement
		public RuleCall getReviseRequirementParserRuleCall_11() { return cReviseRequirementParserRuleCall_11; }
		
		//ProposeExperiment
		public RuleCall getProposeExperimentParserRuleCall_12() { return cProposeExperimentParserRuleCall_12; }
		
		//SupportExperiment
		public RuleCall getSupportExperimentParserRuleCall_13() { return cSupportExperimentParserRuleCall_13; }
		
		//AttackExperiment
		public RuleCall getAttackExperimentParserRuleCall_14() { return cAttackExperimentParserRuleCall_14; }
		
		//RetractExperiment
		public RuleCall getRetractExperimentParserRuleCall_15() { return cRetractExperimentParserRuleCall_15; }
		
		//StudyDone
		public RuleCall getStudyDoneParserRuleCall_16() { return cStudyDoneParserRuleCall_16; }
		
		//NotConvinced
		public RuleCall getNotConvincedParserRuleCall_17() { return cNotConvincedParserRuleCall_17; }
	}
	public class ResearchQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.ResearchQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWhatKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMechanismKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBestKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cExplainsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEffectAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEffectSTRINGTerminalRuleCall_6_0 = (RuleCall)cEffectAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ResearchQuestion:
		//    name=ID '{' 'What' 'mechanism' 'best' 'explains' effect=STRING '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'What' 'mechanism' 'best' 'explains' effect=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'What'
		public Keyword getWhatKeyword_2() { return cWhatKeyword_2; }
		
		//'mechanism'
		public Keyword getMechanismKeyword_3() { return cMechanismKeyword_3; }
		
		//'best'
		public Keyword getBestKeyword_4() { return cBestKeyword_4; }
		
		//'explains'
		public Keyword getExplainsKeyword_5() { return cExplainsKeyword_5; }
		
		//effect=STRING
		public Assignment getEffectAssignment_6() { return cEffectAssignment_6; }
		
		//STRING
		public RuleCall getEffectSTRINGTerminalRuleCall_6_0() { return cEffectSTRINGTerminalRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cContentAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIncorporatesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cMechanismKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMechanismAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMechanismSTRINGTerminalRuleCall_5_0 = (RuleCall)cMechanismAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Model:
		//    name=ID ('{' content=STRING '}')? '<' 'incorporates' 'mechanism' mechanism=STRING '>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('{' content=STRING '}')? '<' 'incorporates' 'mechanism' mechanism=STRING '>'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('{' content=STRING '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//content=STRING
		public Assignment getContentAssignment_1_1() { return cContentAssignment_1_1; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_1_1_0() { return cContentSTRINGTerminalRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'incorporates'
		public Keyword getIncorporatesKeyword_3() { return cIncorporatesKeyword_3; }
		
		//'mechanism'
		public Keyword getMechanismKeyword_4() { return cMechanismKeyword_4; }
		
		//mechanism=STRING
		public Assignment getMechanismAssignment_5() { return cMechanismAssignment_5; }
		
		//STRING
		public RuleCall getMechanismSTRINGTerminalRuleCall_5_0() { return cMechanismSTRINGTerminalRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cContentAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cModelsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cMustKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cReplicateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDataDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDataDescriptionSTRINGTerminalRuleCall_6_0 = (RuleCall)cDataDescriptionAssignment_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Requirement:
		//    name=ID ('{' content=STRING '}')? '<' 'Models' 'must' 'replicate' dataDescription=STRING '>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('{' content=STRING '}')? '<' 'Models' 'must' 'replicate' dataDescription=STRING '>'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('{' content=STRING '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//content=STRING
		public Assignment getContentAssignment_1_1() { return cContentAssignment_1_1; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_1_1_0() { return cContentSTRINGTerminalRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'Models'
		public Keyword getModelsKeyword_3() { return cModelsKeyword_3; }
		
		//'must'
		public Keyword getMustKeyword_4() { return cMustKeyword_4; }
		
		//'replicate'
		public Keyword getReplicateKeyword_5() { return cReplicateKeyword_5; }
		
		//dataDescription=STRING
		public Assignment getDataDescriptionAssignment_6() { return cDataDescriptionAssignment_6; }
		
		//STRING
		public RuleCall getDataDescriptionSTRINGTerminalRuleCall_6_0() { return cDataDescriptionSTRINGTerminalRuleCall_6_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class ExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.Experiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Experiment:
		//    name=ID '{' content=STRING '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' content=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=STRING
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0() { return cContentSTRINGTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TheoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.Theory");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneralTheoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteratureReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultiTheoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Theory:
		//    GeneralTheory | LiteratureReference | MultiTheory
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GeneralTheory | LiteratureReference | MultiTheory
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GeneralTheory
		public RuleCall getGeneralTheoryParserRuleCall_0() { return cGeneralTheoryParserRuleCall_0; }
		
		//LiteratureReference
		public RuleCall getLiteratureReferenceParserRuleCall_1() { return cLiteratureReferenceParserRuleCall_1; }
		
		//MultiTheory
		public RuleCall getMultiTheoryParserRuleCall_2() { return cMultiTheoryParserRuleCall_2; }
	}
	public class MultiTheoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.MultiTheory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTheoriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTheoriesTheoryParserRuleCall_2_0 = (RuleCall)cTheoriesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTheoriesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTheoriesTheoryParserRuleCall_3_1_0 = (RuleCall)cTheoriesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MultiTheory:
		//    // FIXME: Adding a name here for simplicity of generator code. Should allow theories without names.
		//    name=ID '{{' theories+=Theory (',' theories+=Theory)+ '}}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// FIXME: Adding a name here for simplicity of generator code. Should allow theories without names.
		//name=ID '{{' theories+=Theory (',' theories+=Theory)+ '}}'
		public Group getGroup() { return cGroup; }
		
		//// FIXME: Adding a name here for simplicity of generator code. Should allow theories without names.
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{{'
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketLeftCurlyBracketKeyword_1; }
		
		//theories+=Theory
		public Assignment getTheoriesAssignment_2() { return cTheoriesAssignment_2; }
		
		//Theory
		public RuleCall getTheoriesTheoryParserRuleCall_2_0() { return cTheoriesTheoryParserRuleCall_2_0; }
		
		//(',' theories+=Theory)+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//theories+=Theory
		public Assignment getTheoriesAssignment_3_1() { return cTheoriesAssignment_3_1; }
		
		//Theory
		public RuleCall getTheoriesTheoryParserRuleCall_3_1_0() { return cTheoriesTheoryParserRuleCall_3_1_0; }
		
		//'}}'
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_4() { return cRightCurlyBracketRightCurlyBracketKeyword_4; }
	}
	public class GeneralTheoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.GeneralTheory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GeneralTheory:
		//    name=ID '{' content=STRING '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' content=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=STRING
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0() { return cContentSTRINGTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LiteratureReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.LiteratureReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefLITREFTerminalRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		
		//LiteratureReference:
		//    name=ID ref=LITREF
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ref=LITREF
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//ref=LITREF
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//LITREF
		public RuleCall getRefLITREFTerminalRuleCall_1_0() { return cRefLITREFTerminalRuleCall_1_0; }
	}
	public class ProposeRQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.ProposeRQ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProposeResearchQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRqResearchQuestionParserRuleCall_2_0 = (RuleCall)cRqAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProposeRQ:
		//    'proposeResearchQuestion' '(' rq = ResearchQuestion ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'proposeResearchQuestion' '(' rq = ResearchQuestion ')'
		public Group getGroup() { return cGroup; }
		
		//'proposeResearchQuestion'
		public Keyword getProposeResearchQuestionKeyword_0() { return cProposeResearchQuestionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//rq = ResearchQuestion
		public Assignment getRqAssignment_2() { return cRqAssignment_2; }
		
		//ResearchQuestion
		public RuleCall getRqResearchQuestionParserRuleCall_2_0() { return cRqResearchQuestionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ProposeRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.ProposeRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProposeRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequirementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementRequirementParserRuleCall_2_0 = (RuleCall)cRequirementAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRqResearchQuestionCrossReference_4_0 = (CrossReference)cRqAssignment_4.eContents().get(0);
		private final RuleCall cRqResearchQuestionIDTerminalRuleCall_4_0_1 = (RuleCall)cRqResearchQuestionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ProposeRequirement:
		//    'proposeRequirement' '(' requirement=Requirement ',' rq=[ResearchQuestion] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'proposeRequirement' '(' requirement=Requirement ',' rq=[ResearchQuestion] ')'
		public Group getGroup() { return cGroup; }
		
		//'proposeRequirement'
		public Keyword getProposeRequirementKeyword_0() { return cProposeRequirementKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//requirement=Requirement
		public Assignment getRequirementAssignment_2() { return cRequirementAssignment_2; }
		
		//Requirement
		public RuleCall getRequirementRequirementParserRuleCall_2_0() { return cRequirementRequirementParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rq=[ResearchQuestion]
		public Assignment getRqAssignment_4() { return cRqAssignment_4; }
		
		//[ResearchQuestion]
		public CrossReference getRqResearchQuestionCrossReference_4_0() { return cRqResearchQuestionCrossReference_4_0; }
		
		//ID
		public RuleCall getRqResearchQuestionIDTerminalRuleCall_4_0_1() { return cRqResearchQuestionIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AttackRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.AttackRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttackRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequirementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRequirementRequirementCrossReference_2_0 = (CrossReference)cRequirementAssignment_2.eContents().get(0);
		private final RuleCall cRequirementRequirementIDTerminalRuleCall_2_0_1 = (RuleCall)cRequirementRequirementCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTheoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTheoryTheoryParserRuleCall_4_0 = (RuleCall)cTheoryAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttackRequirement:
		//    'AttackRequirement' '(' requirement=[Requirement] ',' theory=Theory ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'AttackRequirement' '(' requirement=[Requirement] ',' theory=Theory ')'
		public Group getGroup() { return cGroup; }
		
		//'AttackRequirement'
		public Keyword getAttackRequirementKeyword_0() { return cAttackRequirementKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//requirement=[Requirement]
		public Assignment getRequirementAssignment_2() { return cRequirementAssignment_2; }
		
		//[Requirement]
		public CrossReference getRequirementRequirementCrossReference_2_0() { return cRequirementRequirementCrossReference_2_0; }
		
		//ID
		public RuleCall getRequirementRequirementIDTerminalRuleCall_2_0_1() { return cRequirementRequirementIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//theory=Theory
		public Assignment getTheoryAssignment_4() { return cTheoryAssignment_4; }
		
		//Theory
		public RuleCall getTheoryTheoryParserRuleCall_4_0() { return cTheoryTheoryParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class RedefineRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.RedefineRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRedefineRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequirementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRequirementRequirementCrossReference_2_0 = (CrossReference)cRequirementAssignment_2.eContents().get(0);
		private final RuleCall cRequirementRequirementIDTerminalRuleCall_2_0_1 = (RuleCall)cRequirementRequirementCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNewRequirementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNewRequirementRequirementParserRuleCall_4_0 = (RuleCall)cNewRequirementAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RedefineRequirement:
		//    'RedefineRequirement' '(' requirement=[Requirement] ',' newRequirement=Requirement ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RedefineRequirement' '(' requirement=[Requirement] ',' newRequirement=Requirement ')'
		public Group getGroup() { return cGroup; }
		
		//'RedefineRequirement'
		public Keyword getRedefineRequirementKeyword_0() { return cRedefineRequirementKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//requirement=[Requirement]
		public Assignment getRequirementAssignment_2() { return cRequirementAssignment_2; }
		
		//[Requirement]
		public CrossReference getRequirementRequirementCrossReference_2_0() { return cRequirementRequirementCrossReference_2_0; }
		
		//ID
		public RuleCall getRequirementRequirementIDTerminalRuleCall_2_0_1() { return cRequirementRequirementIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//newRequirement=Requirement
		public Assignment getNewRequirementAssignment_4() { return cNewRequirementAssignment_4; }
		
		//Requirement
		public RuleCall getNewRequirementRequirementParserRuleCall_4_0() { return cNewRequirementRequirementParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class RetractRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.RetractRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetractRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequirementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRequirementRequirementCrossReference_2_0 = (CrossReference)cRequirementAssignment_2.eContents().get(0);
		private final RuleCall cRequirementRequirementIDTerminalRuleCall_2_0_1 = (RuleCall)cRequirementRequirementCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RetractRequirement:
		//    'RetractRequirement' '(' requirement=[Requirement] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RetractRequirement' '(' requirement=[Requirement] ')'
		public Group getGroup() { return cGroup; }
		
		//'RetractRequirement'
		public Keyword getRetractRequirementKeyword_0() { return cRetractRequirementKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//requirement=[Requirement]
		public Assignment getRequirementAssignment_2() { return cRequirementAssignment_2; }
		
		//[Requirement]
		public CrossReference getRequirementRequirementCrossReference_2_0() { return cRequirementRequirementCrossReference_2_0; }
		
		//ID
		public RuleCall getRequirementRequirementIDTerminalRuleCall_2_0_1() { return cRequirementRequirementIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SupportRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.SupportRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupportRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequirementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRequirementRequirementCrossReference_2_0 = (CrossReference)cRequirementAssignment_2.eContents().get(0);
		private final RuleCall cRequirementRequirementIDTerminalRuleCall_2_0_1 = (RuleCall)cRequirementRequirementCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTheoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTheoryTheoryParserRuleCall_4_0 = (RuleCall)cTheoryAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SupportRequirement:
		//    'supportRequirement' '(' requirement=[Requirement] ',' theory=Theory ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'supportRequirement' '(' requirement=[Requirement] ',' theory=Theory ')'
		public Group getGroup() { return cGroup; }
		
		//'supportRequirement'
		public Keyword getSupportRequirementKeyword_0() { return cSupportRequirementKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//requirement=[Requirement]
		public Assignment getRequirementAssignment_2() { return cRequirementAssignment_2; }
		
		//[Requirement]
		public CrossReference getRequirementRequirementCrossReference_2_0() { return cRequirementRequirementCrossReference_2_0; }
		
		//ID
		public RuleCall getRequirementRequirementIDTerminalRuleCall_2_0_1() { return cRequirementRequirementIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//theory=Theory
		public Assignment getTheoryAssignment_4() { return cTheoryAssignment_4; }
		
		//Theory
		public RuleCall getTheoryTheoryParserRuleCall_4_0() { return cTheoryTheoryParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ProposeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.ProposeModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProposeModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelModelParserRuleCall_2_0 = (RuleCall)cModelAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequirementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRequirementRequirementCrossReference_4_0 = (CrossReference)cRequirementAssignment_4.eContents().get(0);
		private final RuleCall cRequirementRequirementIDTerminalRuleCall_4_0_1 = (RuleCall)cRequirementRequirementCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ProposeModel:
		//    'proposeModel' '(' model=Model ',' requirement=[Requirement] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'proposeModel' '(' model=Model ',' requirement=[Requirement] ')'
		public Group getGroup() { return cGroup; }
		
		//'proposeModel'
		public Keyword getProposeModelKeyword_0() { return cProposeModelKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//model=Model
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//Model
		public RuleCall getModelModelParserRuleCall_2_0() { return cModelModelParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//requirement=[Requirement]
		public Assignment getRequirementAssignment_4() { return cRequirementAssignment_4; }
		
		//[Requirement]
		public CrossReference getRequirementRequirementCrossReference_4_0() { return cRequirementRequirementCrossReference_4_0; }
		
		//ID
		public RuleCall getRequirementRequirementIDTerminalRuleCall_4_0_1() { return cRequirementRequirementIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SupportModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.SupportModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupportModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTheoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTheoryTheoryParserRuleCall_4_0 = (RuleCall)cTheoryAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SupportModel:
		//    'supportModel' '(' model=[Model] ',' theory=Theory ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'supportModel' '(' model=[Model] ',' theory=Theory ')'
		public Group getGroup() { return cGroup; }
		
		//'supportModel'
		public Keyword getSupportModelKeyword_0() { return cSupportModelKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//model=[Model]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//theory=Theory
		public Assignment getTheoryAssignment_4() { return cTheoryAssignment_4; }
		
		//Theory
		public RuleCall getTheoryTheoryParserRuleCall_4_0() { return cTheoryTheoryParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ReplaceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.ReplaceModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNewModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNewModelModelParserRuleCall_4_0 = (RuleCall)cNewModelAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ReplaceModel:
		//    'ReplaceModel' '(' model=[Model] ',' newModel=Model ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReplaceModel' '(' model=[Model] ',' newModel=Model ')'
		public Group getGroup() { return cGroup; }
		
		//'ReplaceModel'
		public Keyword getReplaceModelKeyword_0() { return cReplaceModelKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//model=[Model]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//newModel=Model
		public Assignment getNewModelAssignment_4() { return cNewModelAssignment_4; }
		
		//Model
		public RuleCall getNewModelModelParserRuleCall_4_0() { return cNewModelModelParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CounterModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.CounterModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCounterModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExperimentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExperimentExperimentParserRuleCall_4_0 = (RuleCall)cExperimentAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRequirementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRequirementRequirementCrossReference_6_0 = (CrossReference)cRequirementAssignment_6.eContents().get(0);
		private final RuleCall cRequirementRequirementIDTerminalRuleCall_6_0_1 = (RuleCall)cRequirementRequirementCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CounterModel:
		//    'CounterModel' '(' model=[Model] ',' experiment=Experiment ',' requirement=[Requirement] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'CounterModel' '(' model=[Model] ',' experiment=Experiment ',' requirement=[Requirement] ')'
		public Group getGroup() { return cGroup; }
		
		//'CounterModel'
		public Keyword getCounterModelKeyword_0() { return cCounterModelKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//model=[Model]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//experiment=Experiment
		public Assignment getExperimentAssignment_4() { return cExperimentAssignment_4; }
		
		//Experiment
		public RuleCall getExperimentExperimentParserRuleCall_4_0() { return cExperimentExperimentParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//requirement=[Requirement]
		public Assignment getRequirementAssignment_6() { return cRequirementAssignment_6; }
		
		//[Requirement]
		public CrossReference getRequirementRequirementCrossReference_6_0() { return cRequirementRequirementCrossReference_6_0; }
		
		//ID
		public RuleCall getRequirementRequirementIDTerminalRuleCall_6_0_1() { return cRequirementRequirementIDTerminalRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class AttackModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.AttackModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttackModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTheoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTheoryTheoryParserRuleCall_4_0 = (RuleCall)cTheoryAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttackModel:
		//    'AttackModel' '(' model=[Model] ',' theory=Theory ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'AttackModel' '(' model=[Model] ',' theory=Theory ')'
		public Group getGroup() { return cGroup; }
		
		//'AttackModel'
		public Keyword getAttackModelKeyword_0() { return cAttackModelKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//model=[Model]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//theory=Theory
		public Assignment getTheoryAssignment_4() { return cTheoryAssignment_4; }
		
		//Theory
		public RuleCall getTheoryTheoryParserRuleCall_4_0() { return cTheoryTheoryParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ReviseRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.ReviseRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReviseRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequirementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRequirementRequirementCrossReference_4_0 = (CrossReference)cRequirementAssignment_4.eContents().get(0);
		private final RuleCall cRequirementRequirementIDTerminalRuleCall_4_0_1 = (RuleCall)cRequirementRequirementCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNewRequirementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNewRequirementRequirementParserRuleCall_6_0 = (RuleCall)cNewRequirementAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExperimentAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cExperimentExperimentCrossReference_8_0 = (CrossReference)cExperimentAssignment_8.eContents().get(0);
		private final RuleCall cExperimentExperimentIDTerminalRuleCall_8_0_1 = (RuleCall)cExperimentExperimentCrossReference_8_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////DefendModel:
		////    'DefendModel' '(' model=[Model] ',' counterTheory=[Theory] ',' newTheory=Theory ')';
		//ReviseRequirement:
		//    'ReviseRequirement' '(' model=[Model] ',' requirement=[Requirement] ',' newRequirement=Requirement ',' experiment=[Experiment] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReviseRequirement' '(' model=[Model] ',' requirement=[Requirement] ',' newRequirement=Requirement ',' experiment=[Experiment] ')'
		public Group getGroup() { return cGroup; }
		
		//'ReviseRequirement'
		public Keyword getReviseRequirementKeyword_0() { return cReviseRequirementKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//model=[Model]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//requirement=[Requirement]
		public Assignment getRequirementAssignment_4() { return cRequirementAssignment_4; }
		
		//[Requirement]
		public CrossReference getRequirementRequirementCrossReference_4_0() { return cRequirementRequirementCrossReference_4_0; }
		
		//ID
		public RuleCall getRequirementRequirementIDTerminalRuleCall_4_0_1() { return cRequirementRequirementIDTerminalRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//newRequirement=Requirement
		public Assignment getNewRequirementAssignment_6() { return cNewRequirementAssignment_6; }
		
		//Requirement
		public RuleCall getNewRequirementRequirementParserRuleCall_6_0() { return cNewRequirementRequirementParserRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//experiment=[Experiment]
		public Assignment getExperimentAssignment_8() { return cExperimentAssignment_8; }
		
		//[Experiment]
		public CrossReference getExperimentExperimentCrossReference_8_0() { return cExperimentExperimentCrossReference_8_0; }
		
		//ID
		public RuleCall getExperimentExperimentIDTerminalRuleCall_8_0_1() { return cExperimentExperimentIDTerminalRuleCall_8_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class ProposeExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.ProposeExperiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProposeExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExperimentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExperimentExperimentParserRuleCall_4_0 = (RuleCall)cExperimentAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRequirementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRequirementRequirementCrossReference_6_0 = (CrossReference)cRequirementAssignment_6.eContents().get(0);
		private final RuleCall cRequirementRequirementIDTerminalRuleCall_6_0_1 = (RuleCall)cRequirementRequirementCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ProposeExperiment:
		//    'ProposeExperiment' '(' model=[Model] ',' experiment=Experiment ',' requirement=[Requirement] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ProposeExperiment' '(' model=[Model] ',' experiment=Experiment ',' requirement=[Requirement] ')'
		public Group getGroup() { return cGroup; }
		
		//'ProposeExperiment'
		public Keyword getProposeExperimentKeyword_0() { return cProposeExperimentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//model=[Model]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//experiment=Experiment
		public Assignment getExperimentAssignment_4() { return cExperimentAssignment_4; }
		
		//Experiment
		public RuleCall getExperimentExperimentParserRuleCall_4_0() { return cExperimentExperimentParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//requirement=[Requirement]
		public Assignment getRequirementAssignment_6() { return cRequirementAssignment_6; }
		
		//[Requirement]
		public CrossReference getRequirementRequirementCrossReference_6_0() { return cRequirementRequirementCrossReference_6_0; }
		
		//ID
		public RuleCall getRequirementRequirementIDTerminalRuleCall_6_0_1() { return cRequirementRequirementIDTerminalRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class SupportExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.SupportExperiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupportExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExperimentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExperimentExperimentCrossReference_2_0 = (CrossReference)cExperimentAssignment_2.eContents().get(0);
		private final RuleCall cExperimentExperimentIDTerminalRuleCall_2_0_1 = (RuleCall)cExperimentExperimentCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTheoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTheoryTheoryParserRuleCall_4_0 = (RuleCall)cTheoryAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SupportExperiment:
		//    'SupportExperiment' '(' experiment=[Experiment] ',' theory=Theory ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SupportExperiment' '(' experiment=[Experiment] ',' theory=Theory ')'
		public Group getGroup() { return cGroup; }
		
		//'SupportExperiment'
		public Keyword getSupportExperimentKeyword_0() { return cSupportExperimentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//experiment=[Experiment]
		public Assignment getExperimentAssignment_2() { return cExperimentAssignment_2; }
		
		//[Experiment]
		public CrossReference getExperimentExperimentCrossReference_2_0() { return cExperimentExperimentCrossReference_2_0; }
		
		//ID
		public RuleCall getExperimentExperimentIDTerminalRuleCall_2_0_1() { return cExperimentExperimentIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//theory=Theory
		public Assignment getTheoryAssignment_4() { return cTheoryAssignment_4; }
		
		//Theory
		public RuleCall getTheoryTheoryParserRuleCall_4_0() { return cTheoryTheoryParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AttackExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.AttackExperiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttackExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExperimentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExperimentExperimentCrossReference_2_0 = (CrossReference)cExperimentAssignment_2.eContents().get(0);
		private final RuleCall cExperimentExperimentIDTerminalRuleCall_2_0_1 = (RuleCall)cExperimentExperimentCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTheoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTheoryTheoryParserRuleCall_4_0 = (RuleCall)cTheoryAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttackExperiment:
		//    'AttackExperiment' '(' experiment=[Experiment] ',' theory=Theory ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'AttackExperiment' '(' experiment=[Experiment] ',' theory=Theory ')'
		public Group getGroup() { return cGroup; }
		
		//'AttackExperiment'
		public Keyword getAttackExperimentKeyword_0() { return cAttackExperimentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//experiment=[Experiment]
		public Assignment getExperimentAssignment_2() { return cExperimentAssignment_2; }
		
		//[Experiment]
		public CrossReference getExperimentExperimentCrossReference_2_0() { return cExperimentExperimentCrossReference_2_0; }
		
		//ID
		public RuleCall getExperimentExperimentIDTerminalRuleCall_2_0_1() { return cExperimentExperimentIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//theory=Theory
		public Assignment getTheoryAssignment_4() { return cTheoryAssignment_4; }
		
		//Theory
		public RuleCall getTheoryTheoryParserRuleCall_4_0() { return cTheoryTheoryParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class RetractExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.RetractExperiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetractExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExperimentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExperimentExperimentCrossReference_2_0 = (CrossReference)cExperimentAssignment_2.eContents().get(0);
		private final RuleCall cExperimentExperimentIDTerminalRuleCall_2_0_1 = (RuleCall)cExperimentExperimentCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////AttackTheory:
		////    'AttackTheory' '(' theory=[Theory] ',' counterTheory=Theory ')';
		////DefendExperiment:
		////    'DefendExperiment' '(' experiment=[Experiment] ',' counterTheory=[Theory] ',' newTheory=Theory ')';
		//RetractExperiment:
		//    'RetractExperiment' '(' experiment=[Experiment] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RetractExperiment' '(' experiment=[Experiment] ')'
		public Group getGroup() { return cGroup; }
		
		//'RetractExperiment'
		public Keyword getRetractExperimentKeyword_0() { return cRetractExperimentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//experiment=[Experiment]
		public Assignment getExperimentAssignment_2() { return cExperimentAssignment_2; }
		
		//[Experiment]
		public CrossReference getExperimentExperimentCrossReference_2_0() { return cExperimentExperimentCrossReference_2_0; }
		
		//ID
		public RuleCall getExperimentExperimentIDTerminalRuleCall_2_0_1() { return cExperimentExperimentIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StudyDoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.StudyDone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStudyDoneAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStudyDoneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StudyDone:
		//    {StudyDone}
		//    'StudyDone' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{StudyDone}
		//'StudyDone' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//{StudyDone}
		public Action getStudyDoneAction_0() { return cStudyDoneAction_0; }
		
		//'StudyDone'
		public Keyword getStudyDoneKeyword_1() { return cStudyDoneKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class NotConvincedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.NotConvinced");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotConvincedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NotConvinced:
		//    'NotConvinced' '(' model=[Model] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'NotConvinced' '(' model=[Model] ')'
		public Group getGroup() { return cGroup; }
		
		//'NotConvinced'
		public Keyword getNotConvincedKeyword_0() { return cNotConvincedKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//model=[Model]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final GameElements pGame;
	private final MoveElements pMove;
	private final ResearchQuestionElements pResearchQuestion;
	private final ModelElements pModel;
	private final RequirementElements pRequirement;
	private final ExperimentElements pExperiment;
	private final TheoryElements pTheory;
	private final MultiTheoryElements pMultiTheory;
	private final GeneralTheoryElements pGeneralTheory;
	private final LiteratureReferenceElements pLiteratureReference;
	private final TerminalRule tLITREF;
	private final ProposeRQElements pProposeRQ;
	private final ProposeRequirementElements pProposeRequirement;
	private final AttackRequirementElements pAttackRequirement;
	private final RedefineRequirementElements pRedefineRequirement;
	private final RetractRequirementElements pRetractRequirement;
	private final SupportRequirementElements pSupportRequirement;
	private final ProposeModelElements pProposeModel;
	private final SupportModelElements pSupportModel;
	private final ReplaceModelElements pReplaceModel;
	private final CounterModelElements pCounterModel;
	private final AttackModelElements pAttackModel;
	private final ReviseRequirementElements pReviseRequirement;
	private final ProposeExperimentElements pProposeExperiment;
	private final SupportExperimentElements pSupportExperiment;
	private final AttackExperimentElements pAttackExperiment;
	private final RetractExperimentElements pRetractExperiment;
	private final StudyDoneElements pStudyDone;
	private final NotConvincedElements pNotConvinced;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AgentLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGame = new GameElements();
		this.pMove = new MoveElements();
		this.pResearchQuestion = new ResearchQuestionElements();
		this.pModel = new ModelElements();
		this.pRequirement = new RequirementElements();
		this.pExperiment = new ExperimentElements();
		this.pTheory = new TheoryElements();
		this.pMultiTheory = new MultiTheoryElements();
		this.pGeneralTheory = new GeneralTheoryElements();
		this.pLiteratureReference = new LiteratureReferenceElements();
		this.tLITREF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.modelspeak.AgentLang.LITREF");
		this.pProposeRQ = new ProposeRQElements();
		this.pProposeRequirement = new ProposeRequirementElements();
		this.pAttackRequirement = new AttackRequirementElements();
		this.pRedefineRequirement = new RedefineRequirementElements();
		this.pRetractRequirement = new RetractRequirementElements();
		this.pSupportRequirement = new SupportRequirementElements();
		this.pProposeModel = new ProposeModelElements();
		this.pSupportModel = new SupportModelElements();
		this.pReplaceModel = new ReplaceModelElements();
		this.pCounterModel = new CounterModelElements();
		this.pAttackModel = new AttackModelElements();
		this.pReviseRequirement = new ReviseRequirementElements();
		this.pProposeExperiment = new ProposeExperimentElements();
		this.pSupportExperiment = new SupportExperimentElements();
		this.pAttackExperiment = new AttackExperimentElements();
		this.pRetractExperiment = new RetractExperimentElements();
		this.pStudyDone = new StudyDoneElements();
		this.pNotConvinced = new NotConvincedElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.modelspeak.AgentLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Game:
	//    moves+=Move*;
	public GameElements getGameAccess() {
		return pGame;
	}
	
	public ParserRule getGameRule() {
		return getGameAccess().getRule();
	}
	
	//Move:
	//    ProposeRQ |
	//    ProposeRequirement | AttackRequirement | RedefineRequirement | RetractRequirement |
	//    SupportRequirement | ProposeModel | SupportModel | ReplaceModel | CounterModel |
	//    AttackModel | ReviseRequirement | ProposeExperiment | SupportExperiment |
	//    AttackExperiment | RetractExperiment | StudyDone | NotConvinced;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//ResearchQuestion:
	//    name=ID '{' 'What' 'mechanism' 'best' 'explains' effect=STRING '}'
	//;
	public ResearchQuestionElements getResearchQuestionAccess() {
		return pResearchQuestion;
	}
	
	public ParserRule getResearchQuestionRule() {
		return getResearchQuestionAccess().getRule();
	}
	
	//Model:
	//    name=ID ('{' content=STRING '}')? '<' 'incorporates' 'mechanism' mechanism=STRING '>'
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Requirement:
	//    name=ID ('{' content=STRING '}')? '<' 'Models' 'must' 'replicate' dataDescription=STRING '>'
	//;
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//Experiment:
	//    name=ID '{' content=STRING '}'
	//;
	public ExperimentElements getExperimentAccess() {
		return pExperiment;
	}
	
	public ParserRule getExperimentRule() {
		return getExperimentAccess().getRule();
	}
	
	//Theory:
	//    GeneralTheory | LiteratureReference | MultiTheory
	//;
	public TheoryElements getTheoryAccess() {
		return pTheory;
	}
	
	public ParserRule getTheoryRule() {
		return getTheoryAccess().getRule();
	}
	
	//MultiTheory:
	//    // FIXME: Adding a name here for simplicity of generator code. Should allow theories without names.
	//    name=ID '{{' theories+=Theory (',' theories+=Theory)+ '}}'
	//;
	public MultiTheoryElements getMultiTheoryAccess() {
		return pMultiTheory;
	}
	
	public ParserRule getMultiTheoryRule() {
		return getMultiTheoryAccess().getRule();
	}
	
	//GeneralTheory:
	//    name=ID '{' content=STRING '}'
	//;
	public GeneralTheoryElements getGeneralTheoryAccess() {
		return pGeneralTheory;
	}
	
	public ParserRule getGeneralTheoryRule() {
		return getGeneralTheoryAccess().getRule();
	}
	
	//LiteratureReference:
	//    name=ID ref=LITREF
	//;
	public LiteratureReferenceElements getLiteratureReferenceAccess() {
		return pLiteratureReference;
	}
	
	public ParserRule getLiteratureReferenceRule() {
		return getLiteratureReferenceAccess().getRule();
	}
	
	//// Not ideal (should be a datatype rule), but seems the only way to make this work...
	//terminal LITREF:
	//  '[' (!']')* ']'
	//;
	public TerminalRule getLITREFRule() {
		return tLITREF;
	}
	
	//ProposeRQ:
	//    'proposeResearchQuestion' '(' rq = ResearchQuestion ')';
	public ProposeRQElements getProposeRQAccess() {
		return pProposeRQ;
	}
	
	public ParserRule getProposeRQRule() {
		return getProposeRQAccess().getRule();
	}
	
	//ProposeRequirement:
	//    'proposeRequirement' '(' requirement=Requirement ',' rq=[ResearchQuestion] ')';
	public ProposeRequirementElements getProposeRequirementAccess() {
		return pProposeRequirement;
	}
	
	public ParserRule getProposeRequirementRule() {
		return getProposeRequirementAccess().getRule();
	}
	
	//AttackRequirement:
	//    'AttackRequirement' '(' requirement=[Requirement] ',' theory=Theory ')';
	public AttackRequirementElements getAttackRequirementAccess() {
		return pAttackRequirement;
	}
	
	public ParserRule getAttackRequirementRule() {
		return getAttackRequirementAccess().getRule();
	}
	
	//RedefineRequirement:
	//    'RedefineRequirement' '(' requirement=[Requirement] ',' newRequirement=Requirement ')';
	public RedefineRequirementElements getRedefineRequirementAccess() {
		return pRedefineRequirement;
	}
	
	public ParserRule getRedefineRequirementRule() {
		return getRedefineRequirementAccess().getRule();
	}
	
	//RetractRequirement:
	//    'RetractRequirement' '(' requirement=[Requirement] ')';
	public RetractRequirementElements getRetractRequirementAccess() {
		return pRetractRequirement;
	}
	
	public ParserRule getRetractRequirementRule() {
		return getRetractRequirementAccess().getRule();
	}
	
	//SupportRequirement:
	//    'supportRequirement' '(' requirement=[Requirement] ',' theory=Theory ')';
	public SupportRequirementElements getSupportRequirementAccess() {
		return pSupportRequirement;
	}
	
	public ParserRule getSupportRequirementRule() {
		return getSupportRequirementAccess().getRule();
	}
	
	//ProposeModel:
	//    'proposeModel' '(' model=Model ',' requirement=[Requirement] ')';
	public ProposeModelElements getProposeModelAccess() {
		return pProposeModel;
	}
	
	public ParserRule getProposeModelRule() {
		return getProposeModelAccess().getRule();
	}
	
	//SupportModel:
	//    'supportModel' '(' model=[Model] ',' theory=Theory ')';
	public SupportModelElements getSupportModelAccess() {
		return pSupportModel;
	}
	
	public ParserRule getSupportModelRule() {
		return getSupportModelAccess().getRule();
	}
	
	//ReplaceModel:
	//    'ReplaceModel' '(' model=[Model] ',' newModel=Model ')';
	public ReplaceModelElements getReplaceModelAccess() {
		return pReplaceModel;
	}
	
	public ParserRule getReplaceModelRule() {
		return getReplaceModelAccess().getRule();
	}
	
	//CounterModel:
	//    'CounterModel' '(' model=[Model] ',' experiment=Experiment ',' requirement=[Requirement] ')';
	public CounterModelElements getCounterModelAccess() {
		return pCounterModel;
	}
	
	public ParserRule getCounterModelRule() {
		return getCounterModelAccess().getRule();
	}
	
	//AttackModel:
	//    'AttackModel' '(' model=[Model] ',' theory=Theory ')';
	public AttackModelElements getAttackModelAccess() {
		return pAttackModel;
	}
	
	public ParserRule getAttackModelRule() {
		return getAttackModelAccess().getRule();
	}
	
	////DefendModel:
	////    'DefendModel' '(' model=[Model] ',' counterTheory=[Theory] ',' newTheory=Theory ')';
	//ReviseRequirement:
	//    'ReviseRequirement' '(' model=[Model] ',' requirement=[Requirement] ',' newRequirement=Requirement ',' experiment=[Experiment] ')';
	public ReviseRequirementElements getReviseRequirementAccess() {
		return pReviseRequirement;
	}
	
	public ParserRule getReviseRequirementRule() {
		return getReviseRequirementAccess().getRule();
	}
	
	//ProposeExperiment:
	//    'ProposeExperiment' '(' model=[Model] ',' experiment=Experiment ',' requirement=[Requirement] ')';
	public ProposeExperimentElements getProposeExperimentAccess() {
		return pProposeExperiment;
	}
	
	public ParserRule getProposeExperimentRule() {
		return getProposeExperimentAccess().getRule();
	}
	
	//SupportExperiment:
	//    'SupportExperiment' '(' experiment=[Experiment] ',' theory=Theory ')';
	public SupportExperimentElements getSupportExperimentAccess() {
		return pSupportExperiment;
	}
	
	public ParserRule getSupportExperimentRule() {
		return getSupportExperimentAccess().getRule();
	}
	
	//AttackExperiment:
	//    'AttackExperiment' '(' experiment=[Experiment] ',' theory=Theory ')';
	public AttackExperimentElements getAttackExperimentAccess() {
		return pAttackExperiment;
	}
	
	public ParserRule getAttackExperimentRule() {
		return getAttackExperimentAccess().getRule();
	}
	
	////AttackTheory:
	////    'AttackTheory' '(' theory=[Theory] ',' counterTheory=Theory ')';
	////DefendExperiment:
	////    'DefendExperiment' '(' experiment=[Experiment] ',' counterTheory=[Theory] ',' newTheory=Theory ')';
	//RetractExperiment:
	//    'RetractExperiment' '(' experiment=[Experiment] ')';
	public RetractExperimentElements getRetractExperimentAccess() {
		return pRetractExperiment;
	}
	
	public ParserRule getRetractExperimentRule() {
		return getRetractExperimentAccess().getRule();
	}
	
	//StudyDone:
	//    {StudyDone}
	//    'StudyDone' '(' ')';
	public StudyDoneElements getStudyDoneAccess() {
		return pStudyDone;
	}
	
	public ParserRule getStudyDoneRule() {
		return getStudyDoneAccess().getRule();
	}
	
	//NotConvinced:
	//    'NotConvinced' '(' model=[Model] ')';
	public NotConvincedElements getNotConvincedAccess() {
		return pNotConvinced;
	}
	
	public ParserRule getNotConvincedRule() {
		return getNotConvincedAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
