grammar uk.ac.kcl.inf.modelspeak.AgentLang with org.eclipse.xtext.common.Terminals

generate agentLang "http://www.ac.uk/kcl/inf/modelspeak/AgentLang"

Game:
    moves+=Move*;

Move:
	ProposeRQ |
    ProposeRequirement | AttackRequirement | RedefineRequirement | RetractRequirement | 
    SupportRequirement | ProposeModel | SupportModel | ReplaceModel | CounterModel | 
    AttackModel | ReviseRequirement | ProposeExperiment | SupportExperiment | 
    AttackExperiment | RetractExperiment | StudyDone | NotConvinced;
    
ResearchQuestion:
	name=ID '{' 'What' 'mechanism' 'best' 'explains' effect=STRING '}'
;
    
Model:
	name=ID ('{' content=STRING '}')? '<' 'incorporates' 'mechanism' mechanism=STRING '>'
;
Requirement:
	name=ID ('{' content=STRING '}')? '<' 'Models' 'must' 'replicate' dataDescription=STRING '>' 
;

Experiment:
	name=ID '{' content=STRING '}'
;
Theory:
	GeneralTheory | LiteratureReferenceTheory | MultiTheory
;

MultiTheory:
	// FIXME: Adding a name here for simplicity of generator code. Should allow theories without names.
	name=ID '{{' theories+=Theory (',' theories+=Theory)+ '}}'
;

GeneralTheory:
	name=ID '{' content=STRING '}'
;

LiteratureReferenceTheory:
	LiteratureReference | LiteratureReferenceForData
;

LiteratureReference:
	name=ID ref=LITREF
;

LiteratureReferenceForData:
	name=ID data=STRING 'supported' 'by' ref=LiteratureReference
;

// Not ideal (should be a datatype rule), but seems the only way to make this work...
terminal LITREF:
  '[' (!']')* ']'
;

ProposeRQ:
	'proposeResearchQuestion' '(' rq = ResearchQuestion ')';

ProposeRequirement:
    'proposeRequirement' '(' requirement=Requirement ',' rq=[ResearchQuestion] ')';

AttackRequirement:
    'AttackRequirement' '(' requirement=[Requirement] ',' theory=Theory ')';

RedefineRequirement:
    'RedefineRequirement' '(' requirement=[Requirement] ',' newRequirement=Requirement ')';

RetractRequirement:
    'RetractRequirement' '(' requirement=[Requirement] ')';

SupportRequirement:
    'supportRequirement' '(' requirement=[Requirement] ',' theory=Theory ')';

ProposeModel:
    'proposeModel' '(' model=Model ',' requirement=[Requirement] ')';

SupportModel:
    'supportModel' '(' model=[Model] ',' theory=Theory ')';

ReplaceModel:
    'replaceModel' '(' model=[Model] ',' newModel=Model ')';

CounterModel:
    'counterModel' '(' model=[Model] ',' experiment=Experiment ',' requirement=[Requirement] ')';

AttackModel:
    'AttackModel' '(' model=[Model] ',' theory=Theory ')';

//DefendModel:
//    'DefendModel' '(' model=[Model] ',' counterTheory=[Theory] ',' newTheory=Theory ')';

ReviseRequirement:
    'ReviseRequirement' '(' model=[Model] ',' requirement=[Requirement] ',' newRequirement=Requirement ',' experiment=[Experiment] ')';

ProposeExperiment:
    'ProposeExperiment' '(' model=[Model] ',' experiment=Experiment ',' requirement=[Requirement] ')';

SupportExperiment:
    'SupportExperiment' '(' experiment=[Experiment] ',' theory=Theory ')';

AttackExperiment:
    'AttackExperiment' '(' experiment=[Experiment] ',' theory=Theory ')';

//AttackTheory:
//    'AttackTheory' '(' theory=[Theory] ',' counterTheory=Theory ')';

//DefendExperiment:
//    'DefendExperiment' '(' experiment=[Experiment] ',' counterTheory=[Theory] ',' newTheory=Theory ')';

RetractExperiment:
    'RetractExperiment' '(' experiment=[Experiment] ')';

StudyDone:
    {StudyDone}
    'StudyDone' '(' ')';

NotConvinced:
    'NotConvinced' '(' model=[Model] ')';
