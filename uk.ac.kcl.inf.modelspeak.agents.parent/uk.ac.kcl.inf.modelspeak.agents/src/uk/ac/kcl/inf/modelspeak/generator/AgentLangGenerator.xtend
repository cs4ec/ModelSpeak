/*
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.modelspeak.generator

import java.util.HashMap
import java.util.List
import java.util.Map
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.henshin.interpreter.EGraph
import org.eclipse.emf.henshin.interpreter.Engine
import org.eclipse.emf.henshin.interpreter.InterpreterFactory
import org.eclipse.emf.henshin.interpreter.RuleApplication
import org.eclipse.emf.henshin.interpreter.impl.EGraphImpl
import org.eclipse.emf.henshin.model.Module
import org.eclipse.emf.henshin.model.Rule
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.SaveOptions
import uk.ac.kcl.inf.modelspeak.agentLang.AttackExperiment
import uk.ac.kcl.inf.modelspeak.agentLang.AttackModel
import uk.ac.kcl.inf.modelspeak.agentLang.AttackRequirement
import uk.ac.kcl.inf.modelspeak.agentLang.CounterModel
import uk.ac.kcl.inf.modelspeak.agentLang.Game
import uk.ac.kcl.inf.modelspeak.agentLang.Move
import uk.ac.kcl.inf.modelspeak.agentLang.NotConvinced
import uk.ac.kcl.inf.modelspeak.agentLang.ProposeExperiment
import uk.ac.kcl.inf.modelspeak.agentLang.ProposeModel
import uk.ac.kcl.inf.modelspeak.agentLang.ProposeRequirement
import uk.ac.kcl.inf.modelspeak.agentLang.RedefineRequirement
import uk.ac.kcl.inf.modelspeak.agentLang.ReplaceModel
import uk.ac.kcl.inf.modelspeak.agentLang.RetractExperiment
import uk.ac.kcl.inf.modelspeak.agentLang.RetractRequirement
import uk.ac.kcl.inf.modelspeak.agentLang.SupportExperiment
import uk.ac.kcl.inf.modelspeak.agentLang.SupportModel
import uk.ac.kcl.inf.modelspeak.agentLang.SupportRequirement
import uk.ac.kcl.inf.modelspeak.theoryStoreLang.Experiment
import uk.ac.kcl.inf.modelspeak.theoryStoreLang.Model
import uk.ac.kcl.inf.modelspeak.theoryStoreLang.Requirement
import uk.ac.kcl.inf.modelspeak.theoryStoreLang.Theory
import uk.ac.kcl.inf.modelspeak.theoryStoreLang.TheoryStore
import uk.ac.kcl.inf.modelspeak.theoryStoreLang.TheoryStoreLangFactory

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AgentLangGenerator extends AbstractGenerator {
	val Engine engine = InterpreterFactory.INSTANCE.createEngine
	val RuleApplication ruleRunner = InterpreterFactory.INSTANCE.createRuleApplication(engine)
	var EGraph modelGraph

	var List<Rule> rules

	val extension TheoryStoreLangFactory factory = TheoryStoreLangFactory.eINSTANCE

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val rulesResource = resource.resourceSet.getResource(
			URI.createPlatformPluginURI(
				'/uk.ac.kcl.inf.modelspeak.agents/uk/ac/kcl/inf/modelspeak/generator/theory_store.henshin', false),
			true
		)
		rules = (rulesResource.contents.head as Module).allRules

		resource.contents.filter(Game).forEach[generateTheoryStore(resource, fsa)]
	}

	def generateTheoryStore(Game game, Resource resource, IFileSystemAccess2 fsa) {
		val theoryStore = createTheoryStore
		val outputUri = fsa.getURI("theoryStoreOutput.theoryStore")
		val resourceSet = resource.resourceSet
		val newResource = resourceSet.createResource(outputUri)
		newResource.contents += theoryStore

		modelGraph = new EGraphImpl(theoryStore)
		ruleRunner.EGraph = modelGraph

		// TODO: Replace all methods with appropriate rule calls
		val requirementMap = new HashMap<String, Requirement>()
		val modelMap = new HashMap<String, Model>()
		val experimentMap = new HashMap<String, Experiment>()
		val theoryMap = new HashMap<String, Theory>()

		game.moves.forEach[updateTheoryStore(theoryStore, requirementMap, modelMap, experimentMap, theoryMap)]

		newResource.save(SaveOptions.newBuilder().format().getOptions().toOptionsMap())
	}

	/**
	 * Update the theory store with the consequences of the given move, using the various maps to track referenced 
	 * elements and their representation in the theory store.
	 */
	private dispatch def updateTheoryStore(Move move, TheoryStore theoryStore, Map<String, Requirement> requirementMap,
		Map<String, Model> modelMap, Map<String, Experiment> experimentMap, Map<String, Theory> theoryMap) {}

	// --------------- Requirements -----------------
	private dispatch def updateTheoryStore(ProposeRequirement move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {

		'proposeRequirement'.execute(#['reqName' -> move.requirement.name, 'reqContents' -> move.requirement.content])
	}

	private dispatch def updateTheoryStore(AttackRequirement move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {

		'attackRequirement'.execute(#['attackedRequirement' -> move.requirement.name, 'theoryName' -> move.theory.name,
			'theoryContents' -> move.theory.content])
	}

	private dispatch def updateTheoryStore(RedefineRequirement move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		val newReq = createRequirement
		newReq.name = move.newRequirement.name
		newReq.content = move.newRequirement.content
		if (move.requirement.name !== null) {
			val oldReq = requirementMap.remove(move.requirement.name)

			// Traverse all models that reference the old requirement, and update them to reference the new requirement
			modelMap.values.forEach [ model |
				if (model.requirements.contains(oldReq)) {
					model.requirements.remove(oldReq)
					model.requirements.add(newReq)
				}
			]

			// Remove all Theory that referenced the deleted Requirement
			val theoriesToRemove = theoryStore.elements.filter(Theory).filter [ theory |
				theory.elements.contains(oldReq)
			]
			theoriesToRemove.forEach [ theory |
				theoryStore.elements.remove(theory)
			]

			theoryStore.elements.remove(move.requirement.name)
		}

		requirementMap.put(newReq.name, newReq)
		theoryStore.elements += newReq
	}

	private dispatch def updateTheoryStore(RetractRequirement move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		if (move.requirement.name !== null) {
			requirementMap.remove(move.requirement.name)

			// Remove all Theory that referenced the deleted Requirement
			val theoriesToRemove = theoryStore.elements.filter(Theory).filter [ theory |
				theory.elements.contains(move.requirement)
			]
			theoriesToRemove.forEach [ theory |
				theoryStore.elements.remove(theory)
			]

			theoryStore.elements.remove(move.requirement.name)
		}

	}

	private dispatch def updateTheoryStore(SupportRequirement move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		val theory = createTheory
		theory.name = move.theory.name
		theory.content = move.theory.content
		if (move.requirement.name !== null) {
			theory.elements += requirementMap.get(move.requirement.name)
		}
		theoryMap.put(theory.name, theory)
		theoryStore.elements += theory
	}

	// --------------- Model -----------------
	private dispatch def updateTheoryStore(ProposeModel move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {

		'proposeModel'.execute(
			#['requirementName' -> move.requirement.name, 'modelName' -> move.model.name,
				'modelContents' -> move.model.content])
	}

	private dispatch def updateTheoryStore(SupportModel move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		val theory = createTheory
		theory.name = move.theory.name
		theory.content = move.theory.content
		if (move.model.name !== null) {
			theory.elements += modelMap.get(move.model.name)
		}
		theoryMap.put(theory.name, theory)
		theoryStore.elements += theory
	}

	private dispatch def updateTheoryStore(ReplaceModel move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {

		'replaceModel'.execute(
			#['newModelName' -> move.newModel.name, 'newModelContents' -> move.newModel.content,
				'oldModelName' -> move.model.name])
	}

	private dispatch def updateTheoryStore(CounterModel move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		val experiment = createExperiment
		experiment.name = move.experiment.name
		experiment.content = move.experiment.content
		if (move.model.name !== null) {
			experiment.model += modelMap.get(move.model.name)
		}
		if (move.requirement.name !== null) {
			experiment.requirements += requirementMap.get(move.requirement.name)
		}
		experimentMap.put(experiment.name, experiment)
		theoryStore.elements += experiment

	}

	private dispatch def updateTheoryStore(AttackModel move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {

		'attackModel'.execute(
			#['modelName' -> move.model.name, 'theoryContents' -> move.theory.content,
				'theoryName' -> move.theory.name])
	}

	// --------------- Experiment -----------------
	private dispatch def updateTheoryStore(ProposeExperiment move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		val exp = createExperiment
		exp.name = move.experiment.name
		exp.content = move.experiment.content
		if (move.model.name !== null) {
			exp.model += modelMap.get(move.model.name)
		}
		if (move.requirement.name !== null) {
			exp.requirements += requirementMap.get(move.requirement.name)
		}
		experimentMap.put(exp.name, exp)
		theoryStore.elements += exp
	}

	private dispatch def updateTheoryStore(SupportExperiment move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		val theory = createTheory
		theory.name = move.theory.name
		theory.content = move.theory.content
		if (move.experiment.name !== null) {
			theory.elements += experimentMap.get(move.experiment.name)
		}
		theoryMap.put(theory.name, theory)
		theoryStore.elements += theory
	}

	private dispatch def updateTheoryStore(AttackExperiment move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		val theory = createTheory
		theory.name = move.theory.name
		theory.content = move.theory.content
		if (move.experiment.name !== null) {
			theory.elements += experimentMap.get(move.experiment.name)
		}
		theoryMap.put(theory.name, theory)
		theoryStore.elements += theory
	}

	private dispatch def updateTheoryStore(RetractExperiment move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		if (move.experiment.name !== null) {
			experimentMap.remove(move.experiment.name)
			theoryStore.elements.remove(move.experiment.name)
		}
	}

	private dispatch def updateTheoryStore(NotConvinced move, TheoryStore theoryStore,
		Map<String, Requirement> requirementMap, Map<String, Model> modelMap, Map<String, Experiment> experimentMap,
		Map<String, Theory> theoryMap) {
		val theory = createTheory
		theory.name = "NoConfidence"
		theory.content = "No confidence in model " + move.model.name
		if (move.model.name !== null) {
			theory.elements += modelMap.get(move.model.name)
		}
		theoryStore.elements += theory
	}

	private def execute(String ruleName, List<Pair<String, String>> parameters) {
		ruleRunner.rule = rules.findFirst[name == ruleName]
		parameters.forEach [
			ruleRunner.setParameterValue(key, value)
		]

		ruleRunner.execute(null)
	}
}
