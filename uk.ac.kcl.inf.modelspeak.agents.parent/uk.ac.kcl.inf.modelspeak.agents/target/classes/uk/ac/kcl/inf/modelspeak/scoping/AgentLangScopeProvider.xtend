/*
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.modelspeak.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import uk.ac.kcl.inf.modelspeak.agentLang.CounterModel
import uk.ac.kcl.inf.modelspeak.agentLang.Game
import uk.ac.kcl.inf.modelspeak.agentLang.Move
import uk.ac.kcl.inf.modelspeak.agentLang.ProposeExperiment
import uk.ac.kcl.inf.modelspeak.agentLang.ProposeModel
import uk.ac.kcl.inf.modelspeak.agentLang.ProposeRequirement
import uk.ac.kcl.inf.modelspeak.agentLang.RedefineRequirement
import uk.ac.kcl.inf.modelspeak.agentLang.ReplaceModel
import uk.ac.kcl.inf.modelspeak.agentLang.ReviseRequirement
import uk.ac.kcl.inf.modelspeak.agentLang.SupportExperiment
import uk.ac.kcl.inf.modelspeak.agentLang.SupportModel
import uk.ac.kcl.inf.modelspeak.agentLang.SupportRequirement

import static org.eclipse.xtext.scoping.Scopes.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AgentLangScopeProvider extends AbstractDeclarativeScopeProvider {
	def IScope scope_SupportRequirement_requirement(SupportRequirement supportMove, EReference ref) {
		val game = supportMove.eContainer as Game
		val moves = game.moves.takeWhile[it !== supportMove]
		scopeFor(moves.map[getReq].filterNull)
	}

	dispatch def getReq(Move m) {
		null
	}

	dispatch def getReq(ReviseRequirement m) {
		m.newRequirement
	}

	dispatch def getReq(ProposeRequirement m) {
		m.requirement
	}

	dispatch def getReq(RedefineRequirement m) {
		m.newRequirement
	}

	def IScope scope_SupportModel_model(SupportModel supportMove, EReference ref) {
		val game = supportMove.eContainer as Game
		val moves = game.moves.takeWhile[it !== supportMove]
		scopeFor(moves.map[getModel].filterNull)
	}

	dispatch def getModel(Move m) {
		null
	}

	dispatch def getModel(ProposeModel m) {
		m.model
	}

	dispatch def getModel(ReplaceModel m) {
		m.newModel
	}

	def IScope scope_SupportExperiment_experiment(SupportExperiment supportMove, EReference ref) {
		val game = supportMove.eContainer as Game
		val moves = game.moves.takeWhile[it !== supportMove]
		scopeFor(moves.map[getExperiment].filterNull)
	}

	dispatch def getExperiment(Move m) {
		null
	}

	dispatch def getExperiment(CounterModel m) {
		m.experiment
	}

	dispatch def getExperiment(ProposeExperiment m) {
		m.experiment
	}

}
