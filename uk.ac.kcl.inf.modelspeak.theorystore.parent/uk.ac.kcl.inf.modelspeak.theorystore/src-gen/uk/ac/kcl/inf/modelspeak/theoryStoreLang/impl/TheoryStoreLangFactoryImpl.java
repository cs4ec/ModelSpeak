/**
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.modelspeak.theoryStoreLang.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.modelspeak.theoryStoreLang.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TheoryStoreLangFactoryImpl extends EFactoryImpl implements TheoryStoreLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TheoryStoreLangFactory init()
  {
    try
    {
      TheoryStoreLangFactory theTheoryStoreLangFactory = (TheoryStoreLangFactory)EPackage.Registry.INSTANCE.getEFactory(TheoryStoreLangPackage.eNS_URI);
      if (theTheoryStoreLangFactory != null)
      {
        return theTheoryStoreLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TheoryStoreLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TheoryStoreLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TheoryStoreLangPackage.THEORY_STORE: return createTheoryStore();
      case TheoryStoreLangPackage.ELEMENT: return createElement();
      case TheoryStoreLangPackage.MODEL: return createModel();
      case TheoryStoreLangPackage.THEORY: return createTheory();
      case TheoryStoreLangPackage.REQUIREMENT: return createRequirement();
      case TheoryStoreLangPackage.EXPERIMENT: return createExperiment();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TheoryStore createTheoryStore()
  {
    TheoryStoreImpl theoryStore = new TheoryStoreImpl();
    return theoryStore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Theory createTheory()
  {
    TheoryImpl theory = new TheoryImpl();
    return theory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Experiment createExperiment()
  {
    ExperimentImpl experiment = new ExperimentImpl();
    return experiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TheoryStoreLangPackage getTheoryStoreLangPackage()
  {
    return (TheoryStoreLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TheoryStoreLangPackage getPackage()
  {
    return TheoryStoreLangPackage.eINSTANCE;
  }

} //TheoryStoreLangFactoryImpl
