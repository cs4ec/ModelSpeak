/**
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.modelspeak.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import uk.ac.kcl.inf.modelspeak.services.TheoryStoreLangGrammarAccess;
import uk.ac.kcl.inf.modelspeak.theoryStoreLang.Element;
import uk.ac.kcl.inf.modelspeak.theoryStoreLang.TheoryStore;

@SuppressWarnings("all")
public class TheoryStoreLangFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private TheoryStoreLangGrammarAccess grammarAccess;

  protected void _format(final TheoryStore theoryStore, @Extension final IFormattableDocument document) {
    EList<Element> _elements = theoryStore.getElements();
    for (final Element element : _elements) {
      {
        document.<Element>format(element);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Element>append(element, _function);
      }
    }
  }

  @XbaseGenerated
  public void format(final Object theoryStore, final IFormattableDocument document) {
    if (theoryStore instanceof XtextResource) {
      _format((XtextResource)theoryStore, document);
      return;
    } else if (theoryStore instanceof TheoryStore) {
      _format((TheoryStore)theoryStore, document);
      return;
    } else if (theoryStore instanceof EObject) {
      _format((EObject)theoryStore, document);
      return;
    } else if (theoryStore == null) {
      _format((Void)null, document);
      return;
    } else if (theoryStore != null) {
      _format(theoryStore, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(theoryStore, document).toString());
    }
  }
}
